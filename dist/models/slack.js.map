{"version":3,"sources":["../../src/models/slack.js"],"names":["sequelize","DataTypes","Slack","define","teamName","STRING","token","selected_channel","status","BOOLEAN","timestamps","freezeTableName","allowNull","classMethods","addSlack","slackInfo","Promise","resolve","reject","webhook","IncomingWebhook","send","err","header","statusCode","body","slackData","findAll","then","response","require"],"mappings":";;;;;;kBAEe,UAASA,SAAT,EAAoBC,SAApB,EAA+B;AAC1C,QAAMC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACpCC,kBAAUH,UAAUI,MADgB;AAEpCC,eAAOL,UAAUI,MAFmB;AAGpCE,0BAAkBN,UAAUI,MAHQ;AAIpCG,gBAAQP,UAAUQ;AAJkB,KAA1B,EAKX;AACCC,oBAAY,IADb;AAECC,yBAAiB,IAFlB;AAGCC,mBAAW,IAHZ;AAICC,sBAAc;AACVC,oBADU,oBACDC,SADC,EACU;AAChB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,UAAU,IAAIC,eAAJ,CAAoBL,UAAUT,KAA9B,CAAd;AACAa,4BAAQE,IAAR,CAAa,6BAAb,EAA4C,UAASC,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,IAAlC,EAAwC;AAChF,4BAAIH,GAAJ,EAAS;AACLJ,mCAAOI,GAAP;AACH,yBAFD,MAEO;AACHL,oCAAQO,UAAR;AACH;AACJ,qBAND;AAOH,iBATM,CAAP;AAUH,aAZS;AAaVE,qBAbU,uBAaE;AAAA;;AACR,uBAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIQ,YAAY,EAAhB;AACA,0BAAKC,OAAL,GAAeC,IAAf,CAAoB,UAACC,QAAD,EAAc;AAC9BZ,gCAAQY,QAAR;AACH,qBAFD;AAGH,iBALM,CAAP;AAMH;AApBS;AAJf,KALW,CAAd;AAgCA,WAAO3B,KAAP;AACH,C;;AApCD,IAAIkB,kBAAkBU,QAAQ,eAAR,EAAyBV,eAA/C","file":"slack.js","sourcesContent":["let IncomingWebhook = require('@slack/client').IncomingWebhook;\n\nexport default function(sequelize, DataTypes) {\n    const Slack = sequelize.define(\"SLACK\", {\n        teamName: DataTypes.STRING,\n        token: DataTypes.STRING,\n        selected_channel: DataTypes.STRING,\n        status: DataTypes.BOOLEAN\n    }, {\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        classMethods: {\n            addSlack(slackInfo) {\n                return new Promise((resolve, reject) => {\n                    let webhook = new IncomingWebhook(slackInfo.token);\n                    webhook.send(\"New App Is Added To Channel\", function(err, header, statusCode, body) {\n                        if (err) {\n                            reject(err)\n                        } else {\n                            resolve(statusCode)\n                        }\n                    });\n                });\n            },\n            slackData() {\n                return new Promise((resolve, reject) => {\n                    let slackData = [];\n                    this.findAll().then((response) => {\n                        resolve(response)\n                    })\n                });\n            }\n        }\n    });\n    return Slack;\n}"]}