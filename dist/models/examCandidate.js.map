{"version":3,"sources":["../../src/models/examCandidate.js"],"names":["sequelize","DataTypes","examCandidate","define","email","type","STRING","unique","name","gender","fb_id","BIGINT","profile_pic","examScore","INTEGER","examToken","timestamps","freezeTableName","allowNull","classMethods","signup_login","body","Promise","resolve","reject","randomNumber","then","slack_message","appliedEmail","findOne","sender_mail","get_email","candidate_status","undefined","message","update","$set","multi","resp","where","response","user","slackNotification","slack_response","status","err","create"],"mappings":"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","file":"examCandidate.js","sourcesContent":["import examProvider from \"../providers/examsProvider\";\nimport slack from '../service/sendSlackNotification';\n\nexport default function(sequelize, DataTypes) {\n    const examCandidate = sequelize.define(\"examCandidate\", {\n        email: {\n            type: DataTypes.STRING,\n            unique: true,\n        },\n        name: {\n            type: DataTypes.STRING,\n        },\n        gender: {\n            type: DataTypes.STRING,\n        },\n        fb_id: {\n            type: DataTypes.BIGINT,\n        },\n        profile_pic: {\n            type: DataTypes.STRING,\n        },\n        examScore: {\n            type: DataTypes.INTEGER,\n        },\n        examToken: {\n            type: DataTypes.STRING,\n        }\n    }, {\n        timestamps: true,\n        freezeTableName: true,\n        allowNull: true,\n        classMethods: {\n            signup_login(email, body) {\n                return new Promise((resolve, reject) => {\n                    examProvider.randomNumber().then((examToken) => {\n                        body.examToken = examToken\n                        let slack_message = \"Candidate name \" + body.name + \"\\n\" + \" Candidate email: \" + body.appliedEmail + \"\\n\" + \" Exam Token: \" + body.examToken;\n                        email.findOne({ sender_mail: body.appliedEmail }).then((get_email) => {\n                            if (get_email) {\n                                if ((get_email.candidate_status != undefined && !get_email.candidate_status)) {\n                                    reject({ message: \"Contact with Hr To Approve And Assign A Profile\" })\n                                } else {\n                                    email.update({ sender_mail: body.appliedEmail }, { $set: { fb_id: body.fb_id } }, { multi: true }).then((resp) => {\n                                        this.findOne({ where: { email: body.email } })\n                                            .then((response) => {\n                                                if (response) {\n                                                    this.update(body, { where: { email: body.email } })\n                                                        .then((user) => {\n                                                            if (user) {\n                                                                slack.slackNotification(slack_message, body.appliedEmail).then((slack_response) => {\n                                                                    if (slack_response == 200) {\n                                                                        resolve({\n                                                                            status: 1,\n                                                                            message: \"OTP sent to the HR\"\n                                                                        })\n                                                                    }\n                                                                }, (err) => { reject(err) })\n                                                            } else {\n                                                                reject('could not login')\n                                                            }\n                                                        }, (err) => { reject(err) })\n                                                } else {\n                                                    this.create(body).then((user) => {\n                                                        if (user) {\n                                                            slack.slackNotification(slack_message, body.appliedEmail).then((slack_response) => {\n                                                                if (slack_response == 200) {\n                                                                    resolve({\n                                                                        status: 1,\n                                                                        message: \"OTP sent to the HR\"\n                                                                    })\n                                                                } else {\n                                                                    reject(\"could not generate OTP\")\n                                                                }\n                                                            }, (err) => { reject(err) })\n                                                        } else {\n                                                            reject('could not login');\n                                                        }\n                                                    }, (err) => { reject(err) })\n                                                }\n                                            }, (err) => { reject(err) })\n                                    })\n                                }\n                            } else {\n                                resolve({ status: 0, message: \"have you applied with another email?\" })\n                            }\n                        }, (err) => { reject(err) })\n\n                    })\n                })\n            }\n        }\n    });\n    return examCandidate;\n}"]}