{"version":3,"sources":["../../src/mongodb/db.js"],"names":["db","mongodb","process","env","console","log","exit","conn","module","exports","emailSchema","Schema","email_id","type","Number","from","String","to","sender_mail","date","Date","email_date","email_timestamp","subject","unread","Boolean","answered","is_automatic_email_send","uid","body","tag_id","Array","default_tag","imap_email","genuine_applicant","attachment","is_attachment","shedule_for","shedule_date","shedule_time","push_message","push_status","registration_id","mobile_no","updated_time","send_template","read_email_time","read_by_user","reminder_send","send_template_count","template_id","notes","reply_to_id","email_track","interviewee","source","fb_id","examScore","exam_date","candidate_status","candidate_star","updatedAt","collection","strict","timestamps","userActivity","emailLogs","email","time","user","cron_work","archive_emails","timeStamp","spamBox","examQuestions","question","description","options","job_profile","answer","exam_subject","candidateResult","questionIds","answers","exam_score","taken_time_minutes","history","model","user_activity","email_logs","cronWork","archivedMails","emailTrack","spamInbox","exam_questions","candidate_result","candidate_history","cron","reminder","PendingEmails","req","res","next","archived"],"mappings":"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","file":"db.js","sourcesContent":["import mongoose from \"mongoose\";\nimport config from \"../config\";\nlet db = config.mongodb || process.env.mongodb;\nif (!db) {\n    console.log(\"Mongodb information is not fount update config details\");\n    process.exit(0)\n}\n// let conn = mongoose.createConnection(\"mongodb://localhost/\" + db);\n\nlet conn = 'mongodb://root:java123@ds247698.mlab.com:47698/mymailsystem';\n// conn = mongoose.connect(conn)\n\n// mongodb://<dbuser>:<dbpassword>@ds247698.mlab.com:47698/mymailsystem\nimport cronService from \"../service/cron.js\";\nimport rearrangeDatabase from \"../service/rearrangeDb.js\";\n// the middleware function\nmodule.exports = function() {\n\n    // create schema\n    let emailSchema = mongoose.Schema({\n        email_id: { type: Number },\n        from: { type: String },\n        to: { type: String },\n        sender_mail: { type: String },\n        date: { type: Date },\n        email_date: { type: Date },\n        email_timestamp: { type: String },\n        subject: { type: String },\n        unread: { type: Boolean },\n        answered: { type: Boolean },\n        is_automatic_email_send: { type: Number },\n        uid: { type: Number },\n        body: { type: String },\n        tag_id: { type: Array },\n        default_tag: { type: String },\n        imap_email: { type: String },\n        genuine_applicant: { type: String },\n        attachment: { type: Array },\n        is_attachment: { type: Boolean },\n        shedule_for: { type: String },\n        shedule_date: { type: Date },\n        shedule_time: { type: String },\n        push_message: { type: Array },\n        push_status: { type: Boolean },\n        registration_id: { type: Number },\n        mobile_no: { type: String },\n        updated_time: { type: Date },\n        send_template: { type: String },\n        read_email_time: { type: Date },\n        read_by_user: { type: String },\n        reminder_send: { type: Boolean },\n        send_template_count: { type: Number },\n        template_id: { type: Array },\n        notes: { type: Array },\n        reply_to_id: { type: String },\n        email_track: { type: String },\n        interviewee: { type: Number },\n        source: { type: String },\n        fb_id: { type: Number },\n        examScore: { type: Number },\n        exam_date: { type: Date },\n        candidate_status: { type: Boolean },\n        candidate_star: { type: Array },\n        updatedAt: { type: Date }\n    }, {\n        collection: \"emailStored\",\n        strict: false,\n        timestamps: false\n    });\n\n    let userActivity = mongoose.Schema({}, {\n        collection: 'userActivity',\n        strict: false\n    })\n    let emailLogs = mongoose.Schema({\n        email: { type: Array },\n        from: { type: String },\n        time: { type: Date },\n        user: { type: String },\n        subject: { type: String },\n        body: { type: String },\n        tag_id: { type: Array },\n    }, {\n        collection: 'emaillogs',\n        strict: true\n    })\n    let cron_work = mongoose.Schema({}, {\n        collection: 'cronWork',\n        strict: false\n    })\n\n    let archive_emails = mongoose.Schema({}, {\n        collection: 'archivedMails',\n        strict: false\n    })\n\n    let email_track = mongoose.Schema({}, {\n        collection: 'email_track',\n        timeStamp: true,\n        strict: false\n    })\n\n    let spamBox = mongoose.Schema({}, {\n        collection: 'SpamEmails',\n        timeStamp: true,\n        strict: false\n    })\n\n    let examQuestions = mongoose.Schema({\n        question: { type: String },\n        description: { type: String },\n        options: { type: Array },\n        job_profile: { type: Array },\n        answer: { type: Number },\n        user: { type: String },\n        exam_subject: { type: Number }\n    }, {\n        collection: 'examQuestions',\n        strict: true\n    })\n\n    let candidateResult = mongoose.Schema({\n        fb_id: { type: String },\n        questionIds: { type: Array },\n        answers: { type: Array },\n        exam_score: { type: Number },\n        taken_time_minutes: { type: Number },\n    }, {\n        collection: 'candidateResult',\n        strict: true\n    })\n\n    let history = mongoose.Schema({}, {\n        collection: 'History',\n        timeStamp: true,\n        strict: false\n    })\n\n    let email = conn.model(\"EMAIL\", emailSchema);\n    let user_activity = conn.model('ACTIVITY', userActivity);\n    let email_logs = conn.model('EMAILLOGS', emailLogs);\n    let cronWork = conn.model('CRONSTATUS', cron_work);\n    let archivedMails = conn.model('ARCHIVED', archive_emails);\n    let emailTrack = conn.model('EMAILTRACK', email_track);\n    let spamInbox = conn.model('SPAM', spamBox)\n    let exam_questions = conn.model('QUESTIONS', examQuestions)\n    let candidate_result = conn.model('RESULT', candidateResult)\n    let candidate_history = conn.model('REPLIEDEMAILS', history)\n\n    cronService.cron(email, email_logs, spamInbox, candidate_history)\n    cronService.reminder(email, email_logs)\n    cronService.PendingEmails(cronWork, email_logs, email, emailTrack);\n    // rearrangeDatabase.reArrange(email, candidate_history)  all db is synced\n\n    return function(req, res, next) {\n        req.email = email;\n        req.user_activity = user_activity;\n        req.emailLogs = email_logs;\n        req.cronWork = cronWork;\n        req.archived = archivedMails;\n        req.emailTrack = emailTrack;\n        req.spamBox = spamInbox;\n        req.examQuestions = exam_questions;\n        req.candidateResult = candidate_result;\n        req.history = candidate_history\n        next();\n    };\n};"]}