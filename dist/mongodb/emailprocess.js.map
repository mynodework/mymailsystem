{"version":3,"sources":["../../src/mongodb/emailprocess.js"],"names":["_","fetchEmail","page","tag_id","limit","type","keyword","selected","default_id","default_tag","db","is_attach","user","resolve","reject","message","default_tag_id","forEach","val","key","push","id","toString","where","isNaN","$or","candidate_status","$exists","is_attachment","indexOf","$size","$in","find","sort","updatedAt","skip","parseInt","exec","err","data","length","map","i","candidate_star","index","findcount","mongodb","count1","tagId","mails_unread_count","mails_total_count","sub_child_list","candidate_list","final_data","Tag","findAll","tagType","automatic","is_job_profile_tag","then","tags","order","candidate","unread","result","findCount","findAttachmentMailsCount","attachment_count","mails","title","count","default_id1","subchild","default","genuine","data1","array","callback","attachment_mail_total_count","attachment_mail_unread_count","findDefaultCount","id1","splice","result1","default_tag_data","color","default_tag_list","find_child_count","response","unshift","default_tag_mail","child","parent_id","tagData","assignMultiple","body","email","req","findOne","shedule_for","value","registration_id","Math","floor","random","shedule_date","shedule_time","mobile_no","updated_time","Date","send_template","tamplate_id","update","mongo_id","multi","Template","findById","template","schedule_filter","from","replaced_data","Smtp","status","smtp","subject","sendScheduledMail","sender_mail","mail_response","tag_info","link","attachment","slack_message","format","candidate_url","_id","slackNotification","slack_response","Candidate_device","email_id","device_list","push_message","text","pushMessage","push_response","error","push_notification_message","saved_info","push_status","email_status","is_email_send","template_id","filter","html","smtp_details","smtpInfo","sendMail","emailLog","emailLogs","mail_log","reply_to_id","reply_to","is_automatic_email_send","updated","fetchById","sendToMany","email_list","emails","cronWork","work","sendToAll","campaign_name","save","sendToSelectedTag","email_send_success_list","email_send_fail_list","pending_work","queue","workData","console","log","to","get","uid","Imap","imapCredential","imap","getAttachment","findOneAndUpdate","$set","new","history","catch","attachments","mailAttachment","deleteEmail","size","array_length","msg","remove","deleteTag","each","getShedule","slots_array","list_array","final_data_list","lastDate","add","rounds","getDates","dateArray","round","startDate","stopDate","week_of_month","currentDate","day","date","getTimeSlots","time_slots","shedule_time_slots","first_round_slots","second_round_slots","third_round_slots","check_slot_status","toISOString","substring","shedule_type","shedule_slots","shedule","slots","time","assignToOldTag","assignTag","mongoId","getTime","assignToNewTag","assignNewTag","getFetchedMailCount","imap_emails","imap_data","imap_email","active","createdAt","imap_server","password","server_port","port","fetched_email_count","fetched_mail_till","last_fetched_time","total_emails","days_left_to_fetched","app_get_candidate","scheduled_rounds","info","scheduled_time","scheduled_date","findTagInfo","tagInfo","name","job_description","office_location","app_hr_contact_email","app_hr_contact_number","job_title","checkEmailStatus","flag","email_data","findEmailByDates","days","fetched_date_till","sendToNotReplied","sender_mail_array","sender_mail_data","$not","send_template_count","$lte","$ne","not_replied","no_of_candidate","sendBySelection","selectedCandidate","insert_note","$each","note","assignee","update_note","note_date","note_time","nModified","cron_status","findCronStatus","findPendingCandidate","pending_candidate_status","send_to_all_status","notRepliedCandidate","pending_candidate","archiveEmails","source","target","insertMany","write_reponse","fetchTrackingData","emailTrack","distinct","campaign_list","findCampaignData","candidate_email","sent_time","seen","view_time","campaign_data","findSeenCount","seenCount","total","percentage","ceil","sendEmailToNotviewed","old_campaign_name","notViewedCandidate","findCandidateEmail","details","resendEmail","candidate_mail","assignAnInterviewee","interviewee","getCandidateByInterviewee","deleteCampaign","params","starEmail","star","$addToSet","candiate_star","$pull","getStaredEmails","user_id","candidateArchive","archived","mailArchived"],"mappings":"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","file":"emailprocess.js","sourcesContent":["import * as _ from \"lodash\";\nimport db from \"../db\";\nimport constant from \"../models/constant\";\nimport mail from \"../modules/mail\";\nimport replaceData from \"../modules/replaceVariable\";\nimport imap from \"../service/imap\";\nimport Attachment from \"../modules/getAttachment\";\nimport moment from 'moment';\nimport pushMessage from '../service/pushmessage';\nimport crypto from \"crypto\";\nimport logs from \"../service/emaillogs\";\nimport slack from '../service/sendSlackNotification';\nimport { resolve, reject, Promise } from \"bluebird\";\nimport async from 'async';\n\nconst fetchEmail = (page, tag_id, limit, type, keyword, selected, default_id, default_tag, db, is_attach, user) => {\n    return new Promise((resolve, reject) => {\n        let message;\n        let default_tag_id = []\n        _.forEach(default_tag, (val, key) => {\n            default_tag_id.push(val.id.toString())\n        })\n        let where = '';\n        if (!page || !isNaN(page) == false || page <= 0) {\n            page = 1;\n        }\n\n        if ((type == \"email\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n            where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n        } else if ((type == \"subject\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n            where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n        } else if ((type == \"name\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n            where = { 'from': { \"$regex\": keyword, '$options': 'i' }, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n        } else if ((type == \"email\") && (selected == true) && ((!isNaN(tag_id) == false))) {\n            if (default_id) {\n                where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                if (!is_attach) {\n                    where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n                } else {\n                    where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n                }\n            }\n        } else if ((type == \"subject\") && (selected == true) && (!isNaN(tag_id) == false)) {\n            if (default_id) {\n                where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                if (!is_attach) {\n                    where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                } else {\n                    where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n                }\n            }\n        } else if ((type == \"name\") && (selected == true) && (!isNaN(tag_id) == false)) {\n            if (default_id) {\n                where = { 'from': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                if (!is_attach) {\n                    where = { 'from': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n                } else {\n                    where = { 'from': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n                }\n            }\n        } else if ((type == \"email\") && tag_id) {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\", $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            }\n        } else if ((type == \"subject\") && tag_id) {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\", $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            }\n        } else if ((type == \"name\") && tag_id) {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { \"from\": { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                where = { \"from\": { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\", $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            }\n        } else if (!tag_id || !isNaN(tag_id) == false || tag_id <= 0) {\n            if (!is_attach) {\n                where = { tag_id: { $size: 0 }, is_attachment: 0, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] };\n            } else {\n                where = { tag_id: { $size: 0 }, is_attachment: 1, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] };\n            }\n        } else {\n            if (default_tag_id.indexOf(default_id) >= 0) {\n                where = { default_tag: default_id, tag_id: { $in: [tag_id] }, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else if (default_tag_id.indexOf(tag_id) >= 0) {\n                where = { default_tag: tag_id, $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            } else {\n                where = { tag_id: { $in: [tag_id] }, default_tag: \"\", $or: [{ candidate_status: { $exists: false } }, { candidate_status: true }] }\n            }\n        }\n        db.find(where, { \"_id\": 1, \"date\": 1, \"email_date\": 1, \"uid\": 1, \"is_automatic_email_send\": 1, \"from\": 1, \"sender_mail\": 1, \"subject\": 1, \"unread\": 1, \"attachment\": 1, \"tag_id\": 1, \"is_attachment\": 1, \"default_tag\": 1, \"mobile_no\": 1, \"interviewee\": 1, \"notes\": 1, \"examScore\": 1, \"source\": 1, \"fb_id\": 1, \"updatedAt\": 1, \"candidate_star\": 1 }, { sort: { updatedAt: -1 } }).skip((page - 1) * parseInt(limit)).limit(parseInt(limit)).exec((err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                if (data.length) {\n                    _.map(data, (val, i) => {\n                        if (_.find(val.candidate_star, function(index) { return index === user.id; })) {\n                            data[i].candidate_star = user.id;\n                        } else {\n                            data[i].candidate_star = []\n                        }\n                        if (i == data.length - 1) {\n                            resolve(data, message);\n                        }\n                    });\n                } else {\n                    resolve(data, message);\n                }\n            }\n        });\n    })\n}\n\n\nconst findcount = (mongodb) => {\n    return new Promise((resolve, reject) => {\n        let count1 = [];\n        let tagId = [];\n        let mails_unread_count = 0;\n        let mails_total_count = 0;\n        let sub_child_list = [];\n        let candidate_list = [];\n        let final_data = [];\n        db.Tag.findAll({ where: { type: constant().tagType.automatic, is_job_profile_tag: 0 } })\n            .then((tags) => {\n                _.forEach(tags, (val, key) => {\n                    tagId.push(val)\n                })\n                db.Tag.findAll({\n                        where: { type: constant().tagType.automatic, is_job_profile_tag: 1 },\n                        order: '`priority` ASC'\n                    })\n                    .then((candidate) => {\n                        _.forEach(candidate, (val, key) => {\n                            candidate_list.push(val)\n                        })\n                        mongodb.find({ tag_id: [], is_attachment: false }, { tag_id: 1, default_tag: 1, unread: 1 }).exec(function(err, result) {\n                            mails_total_count = result.length;\n                            _.forEach(result, (val, key) => {\n                                if (val.unread === true) {\n                                    mails_unread_count++;\n                                }\n                            })\n                            findCount(tagId, function(data) {\n                                findAttachmentMailsCount(function(attachment_count) {\n                                    data.push(attachment_count)\n                                    count1 = []\n                                    let mails = { title: \"Mails\", id: 0, unread: mails_unread_count, count: mails_total_count, type: constant().tagType.automatic }\n                                    data.push(mails)\n                                    let default_id1 = [];\n                                    _.forEach(data, (val, key) => {\n                                        delete val.subchild\n                                        final_data.push(val)\n                                    })\n                                    db.Tag.findAll({ where: { type: constant().tagType.default } })\n                                        .then((default_tag) => {\n                                            _.forEach(default_tag, (val, key) => {\n                                                if (val.title != constant().tagType.genuine) {\n                                                    default_id1.push(val);\n                                                }\n                                            })\n                                            findCount(candidate_list, function(data1) {\n                                                let array = [{ title: \"candidate\", data: data1 }, { title: \"inbox\", data: final_data }]\n                                                resolve({ data: array })\n                                            })\n                                        })\n                                })\n                            })\n                        })\n                    })\n            })\n\n        function findAttachmentMailsCount(callback) {\n            mongodb.find({ tag_id: [], is_attachment: true }, { tag_id: 1, default_tag: 1, unread: 1 }).exec(function(err, result) {\n                let attachment_mail_total_count = result.length;\n                let attachment_mail_unread_count = 0;\n                if (attachment_mail_total_count) {\n                    _.forEach(result, (val, key) => {\n                        if (val.unread === true) {\n                            attachment_mail_unread_count++;\n                        }\n                        if (key == result.length - 1) {\n                            callback({ title: \"Attachment\", id: null, unread: attachment_mail_unread_count, count: attachment_mail_total_count, type: constant().tagType.automatic })\n                        }\n                    })\n                } else {\n                    callback({ title: \"Attachment\", id: null, unread: attachment_mail_unread_count, count: attachment_mail_total_count, type: constant().tagType.automatic })\n                }\n            })\n        }\n\n        function findDefaultCount(default_tag_id, callback) {\n            if (default_tag_id.length == 0) {\n                callback(final_data)\n            } else {\n                let id1 = default_tag_id.splice(0, 1)[0];\n                mongodb.find({ default_tag: id1.id }).exec(function(err, result1) {\n                    let unread = 0;\n                    _.forEach(result1, (val, key) => {\n                        if (val.unread === true) {\n                            unread++;\n                        }\n                    })\n                    let default_tag_data = {\n                        id: id1.id,\n                        color: id1.color,\n                        type: id1.type,\n                        title: id1.title,\n                        count: result1.length,\n                        unread: unread,\n                    }\n                    final_data.push(default_tag_data)\n                    if (default_tag_id.length) {\n                        findDefaultCount(default_tag_id, callback)\n                    } else {\n                        callback(final_data)\n                    }\n                })\n            }\n        }\n\n        function findCount(tag_id, callback) {\n            if (tag_id.length == 0) {\n                callback(count1)\n            } else {\n                let tagId = tag_id.splice(0, 1)[0]\n                mongodb.find({ tag_id: { \"$in\": [tagId.id.toString()] }, default_tag: \"\" }, { tag_id: 1, default_tag: 1, unread: 1 }).exec(function(err, result) {\n                    let unread = 0\n                    _.forEach(result, (val, key) => {\n                        if (val.unread === true) {\n                            unread++;\n                        }\n                    })\n                    sub_child_list = []\n                    db.Tag.findAll({ where: { type: constant().tagType.default }, order: '`default_id` ASC' })\n                        .then((default_tag_list) => {\n                            find_child_count(tagId, default_tag_list, function(response) {\n                                response.id = tagId.id;\n                                response.title = tagId.title;\n                                response.type = tagId.type;\n                                response.color = tagId.color;\n                                response.count = result.length;\n                                response.unread = unread;\n                                response.subchild.unshift({ id: tagId.id, title: \"All\", color: tagId.color, count: result.length, unread: unread })\n                                count1.push(response)\n                                if (tag_id.length) {\n                                    findCount(tag_id, callback)\n                                } else {\n                                    callback(count1)\n                                }\n                            })\n                        })\n\n                })\n            }\n        }\n\n        function find_child_count(tagId, default_tag_list, callback) {\n            let default_tag_id = default_tag_list.splice(0, 1)[0]\n            mongodb.find({ tag_id: { \"$in\": [tagId.id.toString()] }, default_tag: default_tag_id.id }).exec(function(err, default_tag_mail) {\n                let child = {\n                    id: default_tag_id.id,\n                    type: default_tag_id.type,\n                    color: default_tag_id.color,\n                    title: default_tag_id.title,\n                    count: 0,\n                    unread: 0,\n                    parent_id: (default_tag_id.parent_id) ? default_tag_id.parent_id : null,\n                    type: default_tag_id.type\n                }\n                if (default_tag_mail.length) {\n                    child.count = default_tag_mail.length\n                    let unread = 0\n                    _.forEach(default_tag_mail, (val, key) => {\n                        if (val.unread === true) {\n                            unread++;\n                        }\n                    })\n                    child.unread = unread\n                }\n                if (child.parent_id != tagId.id && child.parent_id != null) {\n                    // sub_child_list.push(child)\n                } else {\n                    sub_child_list.push(child)\n                }\n                if (default_tag_list.length) {\n                    find_child_count(tagId, default_tag_list, callback)\n                } else {\n                    let tagData = {\n                        subchild: sub_child_list\n                    }\n                    callback(tagData)\n                }\n\n            })\n        }\n    })\n}\n\nlet assignMultiple = (tag_id, body, email, req) => {\n    return new Promise((resolve, reject) => {\n        let where;\n        db.Tag.findOne({\n                where: {\n                    id: tag_id\n                }\n            })\n            .then((data) => {\n                if (data.id) {\n                    if (data.type == constant().tagType.default && body.shedule_for) {\n                        if (body.shedule_for == constant().shedule_for[0].value) {\n                            var registration_id = Math.floor((Math.random() * 1000 * 1000) + Math.random() * 10000);\n                            where = { \"default_tag\": tag_id.toString(), \"shedule_for\": body.shedule_for, \"shedule_date\": body.shedule_date, \"shedule_time\": body.shedule_time, \"registration_id\": registration_id, mobile_no: body.mobile_no, updated_time: new Date(), send_template: body.tamplate_id, unread: false, updatedAt: new Date() }\n                        } else {\n                            where = { \"default_tag\": tag_id.toString(), \"shedule_for\": body.shedule_for, \"shedule_date\": body.shedule_date, \"shedule_time\": body.shedule_time, mobile_no: body.mobile_no, updated_time: new Date(), send_template: body.tamplate_id, unread: false, updatedAt: new Date() }\n                        }\n                    } else if (data.type == constant().tagType.default) {\n                        where = { \"default_tag\": tag_id.toString(), \"shedule_for\": \"\", \"shedule_date\": \"\", \"shedule_time\": \"\", updated_time: new Date(), unread: false, updatedAt: new Date() };\n                    } else {\n                        where = { \"$set\": { \"tag_id\": [tag_id.toString()] }, updated_time: new Date(), unread: false, updatedAt: new Date() };\n                    }\n                    email.update({ \"_id\": { \"$in\": body.mongo_id } }, where, { multi: true }).exec((err) => {\n                        if (err) {\n                            reject(err);\n                        } else {\n                            if (data.type == constant().tagType.default && body.shedule_for) {\n                                email.findOne({ \"_id\": { \"$in\": body.mongo_id } }, { \"attachment\": 1, \"sender_mail\": 1, \"default_tag\": 1, \"from\": 1, \"tag_id\": 1, \"registration_id\": 1, \"from\": 1 }).exec(function(err, response) {\n                                    db.Template.findById(body.tamplate_id)\n                                        .then((template) => {\n                                            replaceData.schedule_filter(template.body, response.from, response.tag_id[response.tag_id.length - 1], body.shedule_date, body.shedule_time)\n                                                .then((replaced_data) => {\n                                                    if (body.shedule_for == constant().shedule_for[0].value)\n                                                        // replaced_data = replaced_data + constant().registration_message + registration_id\n                                                        db.Smtp.findOne({ where: { status: 1 } })\n                                                        .then((smtp) => {\n                                                            if (!smtp) {\n                                                                resolve({\n                                                                    status: 1,\n                                                                    message: \"Interview is sheduled but email is not send\",\n                                                                    data: response\n                                                                })\n                                                            }\n                                                            template.subject += \" On Dated \" + body.shedule_date + \" At \" + body.shedule_time;\n                                                            mail.sendScheduledMail(response.sender_mail, template.subject, \"\", smtp, replaced_data)\n                                                                .then((mail_response) => {\n                                                                    db.Tag.findById(parseInt(response.tag_id[0])).then((tag_info) => {\n                                                                        let link = response.attachment[0] ? response.attachment[0].link : \"No Attachment\";\n                                                                        let slack_message = constant().slack_message + \"\\n\" + \"Job Profile: \" + tag_info.title + \"\\n\" + \"Candidate Name: \" + response.from + \"\\n\" + \" On Dated \" + moment(body.shedule_date).format(\"MMMM Do YYYY\") + \" At \" + body.shedule_time + \"\\n\" + \"Cv: \" + link + \"\\n\" + constant().candidate_url + response._id;\n                                                                        slack.slackNotification(slack_message, response.sender_mail).then((slack_response) => {\n                                                                            db.Candidate_device.findOne({ where: { email_id: response.sender_mail } })\n                                                                                .then((device_list) => {\n                                                                                    if (device_list) {\n                                                                                        let push_message = \"\";\n                                                                                        _.forEach(constant().shedule_for, (val, key) => {\n                                                                                            if (val.value == body.shedule_for) {\n                                                                                                push_message = val.text + \" on \" + moment(body.shedule_date).format(\"MMM DD, YYYY\") + \" at \" + body.shedule_time;\n                                                                                            }\n                                                                                        })\n                                                                                        pushMessage.pushMessage(device_list, push_message)\n                                                                                            .then((push_response) => {\n                                                                                                if (!push_response.error) {\n                                                                                                    email.update({ \"_id\": { \"$in\": body.mongo_id } }, { \"$addToSet\": { \"push_message\": constant().push_notification_message + \" \" + body.shedule_for }, \"push_status\": 1 }, { multi: true }).exec(function(err, saved_info) {\n                                                                                                        resolve({\n                                                                                                            status: 1,\n                                                                                                            message: \"success\",\n                                                                                                            data: response,\n                                                                                                            push_status: push_response,\n                                                                                                            email_status: mail_response\n                                                                                                        });\n                                                                                                    })\n                                                                                                } else {\n                                                                                                    resolve({\n                                                                                                        status: 1,\n                                                                                                        message: \"success\",\n                                                                                                        data: response,\n                                                                                                        push_status: push_response,\n                                                                                                        email_status: mail_response\n                                                                                                    });\n                                                                                                }\n                                                                                            })\n                                                                                    } else {\n                                                                                        resolve({\n                                                                                            status: 1,\n                                                                                            message: \"success\",\n                                                                                            data: response,\n                                                                                            email_status: mail_response\n                                                                                        })\n                                                                                    }\n                                                                                }, (err) => { reject(err) })\n\n                                                                        }, (err) => { reject(err) })\n                                                                    })\n                                                                })\n                                                        })\n                                                })\n\n                                        }, (err) => { reject(err) })\n                                })\n                            } else {\n                                email.findOne({ \"_id\": { \"$in\": body.mongo_id } }, { \"attachment\": 1, \"sender_mail\": 1, \"default_tag\": 1, \"from\": 1, \"tag_id\": 1, \"registration_id\": 1, \"from\": 1, \"parent_id\": 1 }).exec(function(err, response) {\n                                    db.Tag.findById(parseInt(response.tag_id[0])).then((tag_info) => {\n                                        if (response.default_tag) {\n                                            db.Tag.findById(parseInt(response.default_tag)).then((default_tag) => {\n                                                let slack_message = \"Job Profile: \" + tag_info.title + \"\\n\" + \"Candidate Name: \" + response.from + \"\\n\" + \"Tag Moved To: \" + default_tag.title + \"\\n\" + \" Assignee: \" + req.user.email + \"\\n\" + \" On Dated \" + moment(new Date()).format(\"LLL\") + \"\\n\" + constant().candidate_url + response._id;\n                                                slack.slackNotification(slack_message, response.sender_mail).then((slack_response) => {\n                                                    resolve({\n                                                        status: 1,\n                                                        message: \"success\",\n                                                        email_status: 0\n                                                    });\n                                                })\n                                            })\n                                        } else {\n                                            if (tag_info.is_email_send) {\n                                                db.Template.findById(tag_info.template_id).then((template) => {\n                                                    replaceData.filter(template.body, response.from, tag_info.id).then((html) => {\n                                                        db.Smtp.smtp_details().then((smtpInfo) => {\n                                                            mail.sendMail(response.sender_mail, template.subject, constant().smtp.text, smtpInfo, html, true).then((mail_response) => {\n                                                                logs.emailLog(req.emailLogs, mail_response).then((mail_log) => {\n                                                                    email.update({ _id: response._id }, { reply_to_id: mail_response.reply_to, is_automatic_email_send: true, updatedAt: new Date(), unread: false }).then((updated) => {\n                                                                        resolve({\n                                                                            status: 1,\n                                                                            message: \"success\",\n                                                                            email_status: 1\n                                                                        });\n                                                                    })\n                                                                })\n                                                            })\n                                                        })\n                                                    })\n                                                })\n                                            } else {\n                                                resolve({\n                                                    status: 1,\n                                                    message: \"success\",\n                                                    email_status: 0\n                                                });\n                                            }\n                                        }\n\n                                    })\n                                })\n                            }\n                        }\n                    });\n                } else {\n                    reject(\"invalid tag id\");\n                }\n            })\n    })\n}\n\nlet fetchById = (type, keyword, selected, default_id, tag_id, is_attach) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.findAll({ where: { type: constant().tagType.default } })\n            .then((default_tag) => {\n                let default_tag_id = []\n                _.forEach(default_tag, (val, key) => {\n                    default_tag_id.push(val.id.toString())\n                })\n                let where = \"\"\n                if ((type == \"email\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n                    where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' } }\n                } else if ((type == \"subject\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n                    where = { 'subject': { \"$regex\": keyword, '$options': 'i' } }\n                } else if ((type == \"name\") && (!selected) && (!isNaN(tag_id) == false)) {\n\n                    where = { 'from': { \"$regex\": keyword, '$options': 'i' } }\n                } else if ((type == \"email\") && (selected == true) && ((!isNaN(tag_id) == false))) {\n                    if (default_id) {\n                        where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n                    } else {\n                        if (!is_attach) {\n                            where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                        } else {\n                            where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                        }\n                    }\n                } else if ((type == \"subject\") && (selected == true) && (!isNaN(tag_id) == false)) {\n                    if (default_id) {\n                        where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n                    } else {\n                        if (!is_attach) {\n                            where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                        } else {\n                            where = { 'subject': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                        }\n                    }\n                } else if ((type == \"name\") && (selected == true) && (!isNaN(tag_id) == false)) {\n                    if (default_id) {\n                        where = { 'from': { \"$regex\": keyword, '$options': 'i' }, \"default_tag\": default_id }\n                    } else {\n                        if (!is_attach) {\n                            where = { 'from': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [] }\n                        } else {\n                            where = { 'from': { \"$regex\": keyword, '$options': 'i' }, \"tag_id\": [], is_attachment: true }\n                        }\n                    }\n                } else if ((type == \"email\") && tag_id) {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n                    } else {\n                        where = { 'sender_mail': { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n                    }\n                } else if ((type == \"subject\") && tag_id) {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n                    } else {\n                        where = { \"subject\": { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n                    }\n                } else if ((type == \"name\") && tag_id) {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { \"from\": { \"$regex\": keyword, '$options': 'i' }, 'default_tag': default_id, 'tag_id': tag_id }\n                    } else {\n                        where = { \"from\": { \"$regex\": keyword, '$options': 'i' }, 'tag_id': tag_id, default_tag: \"\" }\n                    }\n                } else if (!tag_id || !isNaN(tag_id) == false || tag_id <= 0) {\n                    if (!is_attach) {\n                        where = { tag_id: { $size: 0 }, is_attachment: 0 };\n                    } else {\n                        where = { tag_id: { $size: 0 }, is_attachment: 1 };\n                    }\n                } else {\n                    if (default_tag_id.indexOf(default_id) >= 0) {\n                        where = { default_tag: default_id, tag_id: { $in: [tag_id] } }\n                    } else if (default_tag_id.indexOf(tag_id) >= 0) {\n                        where = { default_tag: tag_id }\n                    } else {\n                        where = { tag_id: { $in: [tag_id] }, default_tag: \"\" }\n                    }\n                }\n                resolve(where)\n            })\n    })\n}\n\nlet sendToMany = (req, email_list, subject, body, tag_id, default_id, email) => {\n    return new Promise((resolve, reject) => {\n        let where;\n        let emails = [];\n        if (tag_id && default_id) {\n            where = { \"tag_id\": { \"$in\": [tag_id.toString()] }, \"default_tag\": default_id.toString() };\n        } else {\n            where = { tag_id: { \"$in\": [tag_id.toString()] }, \"default_tag\": \"\" };\n        }\n        if (tag_id) {\n            email.find({ \"$and\": [where] }).exec(function(err, data) {\n                _.forEach(data, (val, key) => {\n                    emails.push(val.sender_mail)\n                    if (key == data.length - 1) {\n                        let data = new req.cronWork({ body: req.body.body, tag_id: tag_id.toString(), subject: req.body.subject, user: req.user.email, candidate_list: emails, status: 1, work: constant().sendToAll, template_id: req.body.template_id, campaign_name: req.body.campaign_name })\n                        data.save(function(err, response) {\n                            resolve(response)\n                        })\n                    }\n                })\n            })\n        }\n    })\n}\n\nlet sendToSelectedTag = (req, id, email) => {\n    return new Promise((resolve, reject) => {\n        let email_send_success_list = [];\n        let email_send_fail_list = [];\n        db.Tag.findById(id)\n            .then((data) => {\n                if (data) {\n                    db.Template.findById(data.template_id)\n                        .then((template) => {\n                            if (template) {\n                                email.find({ 'tag_id': { $in: [id.toString()] }, \"$or\": [{ is_automatic_email_send: 0 }, { is_automatic_email_send: { \"$exists\": false } }] }, { \"_id\": 1, \"sender_mail\": 1, \"from\": 1, \"subject\": 1, \"tag_id\": 1 }).exec(function(err, result) {\n                                    let data = new req.cronWork({ tag_id: id.toString(), candidate_list: result, template_id: template.id, user: req.user.email, work: constant().pending_work, status: 1, campaign_name: req.body.campaign_name });\n                                    data.save(function(err, response) {\n                                        if (err) {\n                                            reject(err)\n                                        } else {\n                                            resolve({ status: 0, message: \"Send email to pending candidate is started..\", data: [] });\n                                        }\n                                    })\n                                })\n                            } else {\n                                reject(\"No template found\")\n                            }\n                        })\n                } else {\n                    reject(\"Invalid Tag id\")\n                }\n            })\n    })\n}\nlet queue = async.queue(function(workData, callback) {\n    workData.email.findOne({ _id: workData.mongo_id }, (error, data) => {\n\n        if (error) {\n            callback({ status: 0, message: err });\n        } else {\n            if (data) {\n                console.log('============= normal email');\n                let to = data.get(\"imap_email\");\n                let uid = data.get(\"uid\");\n                if (to && uid) {\n                    db.Imap.findOne({ where: { email: to } })\n                        .then((data) => {\n                            console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n                            imap.imapCredential(data)\n                                .then((imap) => {\n                                    console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%');\n                                    Attachment.getAttachment(imap, uid)\n                                        .then((response) => {\n                                            console.log('=================== attached got finally ============');\n                                            workData.email.findOneAndUpdate({ _id: workData.mongo_id }, { $set: { attachment: response } }, { new: true }, (err, response) => {\n                                                if (err) {\n                                                    callback({ status: 0, message: err });\n                                                } else {\n                                                    callback({ status: 1, message: \" attachment save successfully\", data: response });\n                                                }\n                                            });\n                                        })\n\n                                })\n\n                        })\n\n                } else {\n                    callback({ status: 0, message: 'data not found in database' });\n                }\n            } else {\n                workData.history.findOne({ _id: workData.mongo_id }, (error, data) => {\n                    console.log('============= history email');\n                    let to = data.get(\"imap_email\");\n                    let uid = data.get(\"uid\");\n                    if (to && uid) {\n                        db.Imap.findOne({ where: { email: to } })\n                            .then((data) => {\n                                console.log('============= history email................' + to);\n                                console.log(data, 'datadata');\n                                imap.imapCredential(data)\n                                    .then((imap) => {\n                                        console.log('%%%%%%%%%%%%%%%%%%%%%5', imap);\n                                        Attachment.getAttachment(imap, uid)\n                                            .then((response) => {\n                                                console.log('=================== attached got finally ============');\n                                                workData.history.findOneAndUpdate({ _id: workData.mongo_id }, { $set: { attachment: response } }, { new: true }, (err, response) => {\n                                                    if (err) {\n                                                        callback({ status: 0, message: err });\n                                                    } else {\n                                                        callback({ status: 1, message: \" attachment save successfully\", data: response });\n                                                    }\n                                                });\n                                            })\n\n                                    }).catch(err => callback({ status: 0, message: err }))\n\n                            })\n\n                    } else {\n                        callback({ status: 0, message: 'data not found in database' });\n                    }\n                })\n            }\n        }\n    })\n})\n\n\nlet attachments = {}\nlet mailAttachment = (mongo_id, email, history) => {\n    return new Promise((resolve, reject) => {\n        if (attachments[mongo_id] && attachments[mongo_id]['status'] == 1) {\n            resolve(attachments[mongo_id]);\n            delete attachments[mongo_id];\n        } else if (!attachments[mongo_id]) {\n            attachments[mongo_id] = { status: -1, message: \"in progress\" };\n            reject(attachments[mongo_id]);\n            queue.push({ mongo_id: mongo_id, email: email, history: history }, function(err, response) {\n                console.log('file uploaded');\n                attachments[mongo_id] = { status: 1, message: \"attachment save successfully\", data: response };\n            });\n        } else {\n            reject(attachments[mongo_id]);\n        }\n\n    })\n}\n\nlet deleteEmail = (tag_id, mongo_id, email) => {\n    return new Promise((resolve, reject) => {\n        let response = [];\n        let size = _.size(mongo_id);\n        _.forEach(mongo_id, (val, key) => {\n            email.findOneAndUpdate({ \"_id\": val }, { \"$pull\": { \"tag_id\": tag_id } }, { new: true }).exec((err, data) => {\n                if (err) {\n                    response.push({ status: 0, message: err, array_length: key });\n                }\n                if (!data) {\n                    response.push({ status: 0, msg: \"not found\", array_length: key });\n                } else {\n                    if (!_.size(data.tag_id)) {\n                        data.remove();\n                    }\n                    response.push({ status: 1, msg: \"delete success\", array_length: key });\n                }\n                if (key == (mongo_id.length - 1)) {\n                    resolve({ status: 1, message: \"success\", data: response });\n                }\n            });\n        });\n    })\n}\n\nlet deleteTag = (tag_id, mongo_id, email) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.findOne({ where: { id: tag_id } })\n            .then((data) => {\n                if (data.id) {\n                    _.each(mongo_id, (val, key) => {\n                        email.findOneAndUpdate({ \"_id\": val }, { \"$pull\": { \"tag_id\": tag_id } }).exec((err) => {\n                            if (err) {\n                                reject(err);\n                            } else {\n                                if (key == (_.size(mongo_id) - 1)) {\n                                    resolve({ status: 1, message: \"success\" });\n                                }\n                            }\n                        });\n                    });\n                } else {\n                    reject(\"invalid tag id\");\n                }\n            })\n    })\n}\n\nlet getShedule = (email) => {\n    return new Promise((resolve, reject) => {\n        let slots_array = [];\n        let list_array = [];\n        let final_data_list = {}\n        let lastDate = moment(new Date()).add(1, 'months');\n        let rounds = []\n        getDates(moment(new Date()).add(1, 'days'), lastDate, function(dateArray) {\n            _.forEach(constant().shedule_for, (val, key) => {\n                rounds.push({ round: val.text });\n                if (key == constant().shedule_for.length - 1) {\n                    dateArray[0]['rounds'] = rounds\n                    resolve(dateArray)\n                }\n            })\n        })\n\n        function getDates(startDate, stopDate, callback) {\n            let week_of_month = [1, 2, 3, 4, 5]\n            let currentDate = moment(startDate);\n            stopDate = moment(stopDate);\n            if (!(moment(currentDate).day() == 6 && !(week_of_month[0 | moment(currentDate).date() / 7] % 2))) {\n                if (!moment(currentDate).day() == 0) {\n                    getTimeSlots(currentDate, function(time_slots) {\n                        currentDate = moment(currentDate).add(1, 'days');\n                        if (startDate <= stopDate) {\n                            getDates(currentDate, stopDate, callback)\n                        } else {\n                            callback(time_slots);\n                        }\n                    })\n                } else {\n                    currentDate = moment(currentDate).add(1, 'days');\n                    getDates(currentDate, stopDate, callback)\n                }\n            } else {\n                currentDate = moment(currentDate).add(1, 'days');\n                getDates(currentDate, stopDate, callback)\n            }\n        }\n\n        function getTimeSlots(currentDate, callback) {\n            slots_array = []\n            final_data_list = {}\n            let shedule_for = constant().shedule_for;\n            let shedule_time_slots = [constant().first_round_slots, constant().second_round_slots, constant().third_round_slots];\n            check_slot_status(shedule_for, shedule_time_slots, currentDate, function(response) {\n                list_array.push({ date: currentDate.toISOString().substring(0, 10), time_slots: response })\n                callback(list_array)\n            })\n\n        }\n\n\n        function check_slot_status(shedule_type, shedule_slots, date, callback) {\n            let shedule = shedule_type.splice(0, 1)[0]\n            let slots = shedule_slots.splice(0, 1)[0]\n            email.find({ shedule_date: date.toISOString().substring(0, 10), shedule_for: shedule.value }, { \"shedule_time\": 1 }).exec(function(err, shedule_time) {\n                if (shedule_time.length) {\n                    let time = []\n                    _.forEach(shedule_time, (val, key) => {\n                        time.push(val.shedule_time)\n                    })\n                    _.forEach(slots, (val, key) => {\n                        if (time.indexOf(val) >= 0) {\n                            slots_array.push({ time: time[time.indexOf(val)], status: 0 })\n                        } else {\n                            slots_array.push({ time: val, status: 1 })\n                        }\n                        if (key == slots.length - 1) {\n                            final_data_list[shedule.value] = slots_array;\n                            if (shedule_type.length) {\n                                slots_array = []\n                                check_slot_status(shedule_type, shedule_slots, date, callback)\n                            } else {\n                                final_data_list[shedule.value] = slots_array;\n                                callback(final_data_list)\n                            }\n                        }\n                    })\n                } else {\n                    _.forEach(slots, (val, key) => {\n                        slots_array.push({ time: val, status: 1 })\n                        if (key == slots.length - 1) {\n                            final_data_list[shedule.value] = slots_array;\n                            if (shedule_type.length) {\n                                slots_array = []\n                                check_slot_status(shedule_type, shedule_slots, date, callback)\n                            } else {\n                                final_data_list[shedule.value] = slots_array;\n                                callback(final_data_list)\n                            }\n                        }\n                    })\n                }\n            })\n\n        }\n    });\n}\n\nlet assignToOldTag = (data, email) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.assignTag(data, email)\n            .then((response) => {\n                function assignTag(id) {\n                    let mongoId = id.splice(0, 100)\n                    email.update({ _id: { $in: mongoId } }, { \"$set\": { \"tag_id\": [data.id.toString()] }, \"email_timestamp\": new Date().getTime(), unread: false }, { multi: true })\n                        .then((data1) => {\n                            if (!id.length) {\n                                resolve({ message: \"tag assigned sucessfully\" })\n                            } else {\n                                assignTag(id)\n                            }\n                        })\n                }\n                assignTag(response)\n            }, (err) => {\n                reject(err)\n            });\n    })\n}\n\nlet assignToNewTag = (data, email) => {\n    return new Promise((resolve, reject) => {\n        db.Tag.assignNewTag(data, email)\n            .then((response) => {\n                function assignTag(id) {\n                    let mongoId = id.splice(0, 100)\n                    email.update({ _id: { $in: mongoId } }, { \"default_tag\": data.id.toString(), \"email_timestamp\": new Date().getTime() }, { multi: true })\n                        .then((data1) => {\n                            if (!id.length) {\n                                resolve({ message: \"tag assigned sucessfully\" })\n                            } else {\n                                assignTag(id)\n                            }\n                        })\n                }\n                assignTag(response)\n            }, (err) => {\n                reject(err)\n            });\n    })\n}\n\nlet getFetchedMailCount = (imap_emails, email) => {\n    return new Promise((resolve, reject) => {\n        let result = []\n        findCount(imap_emails, function(data) {\n            resolve(result)\n        })\n\n        function findCount(emails, callback) {\n            let imap_data = \"\";\n            let imap_email = emails.splice(0, 1)[0]\n            if (!imap_email) {\n                callback({})\n            } else {\n                email.find({ imap_email: imap_email.email }).count().exec(function(err, data) {\n                    imap_data = {\n                        active: imap_email.active,\n                        createdAt: imap_email.createdAt,\n                        email: imap_email.email,\n                        id: imap_email.id,\n                        imap_server: imap_email.imap_server,\n                        password: imap_email.password,\n                        server_port: imap_email.port,\n                        status: imap_email.status,\n                        type: imap_email.type,\n                        updatedAt: imap_email.updatedAt,\n                        fetched_email_count: data,\n                        fetched_mail_till: moment(imap_email.last_fetched_time).format(\"DD,MM,YYYY\"),\n                        total_emails: imap_email.total_emails,\n                        days_left_to_fetched: imap_email.days_left_to_fetched\n                    }\n                    result.push(imap_data)\n                    if (emails.length) {\n                        findCount(emails, callback)\n                    } else {\n                        callback(result)\n                    }\n                })\n            }\n        }\n    })\n}\n\nlet app_get_candidate = (email, registration_id) => {\n    return new Promise((resolve, reject) => {\n        let rounds = []\n        let scheduled_rounds = []\n        _.forEach(constant().shedule_for, (val, key) => {\n            scheduled_rounds.push(val.value)\n        })\n        email.findOne({ shedule_for: { \"$in\": scheduled_rounds }, registration_id: registration_id }, { \"from\": 1, \"tag_id\": 1, \"shedule_date\": 1, \"shedule_time\": 1, \"shedule_for\": 1, \"push_message\": 1, \"push_status\": 1, \"registration_id\": 1, \"sender_mail\": 1, \"mobile_no\": 1 }).exec(function(err, response) {\n            if (err) {\n                reject({ error: 1, message: \"Invalid Registration Number\", data: [] })\n            } else {\n                if (response) {\n                    _.each(constant().shedule_for, (val, key) => {\n                        rounds.push((val.value == response.shedule_for) ? { text: val.text, info: val.info, scheduled_time: response.shedule_time, scheduled_date: moment(response.shedule_date).format(\"MMM DD, YYYY\"), status: 1 } : { text: val.text, info: val.info, scheduled_time: \"\", scheduled_date: \"\", status: 0 })\n                        if (key == constant().shedule_for.length - 1 || (val.value == response.shedule_for)) {\n                            db.Tag.findTagInfo(response.tag_id[0])\n                                .then((tagInfo) => {\n                                    resolve({ name: response.from, mobile_no: response.mobile_no || null, email: response.sender_mail, subject: tagInfo.subject, job_description: tagInfo.job_description, rounds: rounds, push_message: response.push_message, push_status: response.push_status, registration_id: response.registration_id, office_location: constant().office_location, app_hr_contact_email: constant().app_hr_contact_email, app_hr_contact_number: constant().app_hr_contact_number, job_title: tagInfo.title })\n                                }, (error) => { reject(error) })\n                            return false\n                        }\n                    })\n                } else {\n                    reject({ error: 1, message: \"Invalid Registration Number\", data: [] })\n                }\n            }\n        })\n    })\n}\n\nlet checkEmailStatus = (req) => {\n    return new Promise((resolve, reject) => {\n        let rounds = [];\n        let flag = 0\n        _.forEach(constant().shedule_for, (val, key) => {\n            rounds.push(val.value)\n        })\n        req.email.findOne({ sender_mail: req.body.email, tag_id: req.body.tag_id.toString(), shedule_for: { $in: rounds } }, { \"shedule_for\": 1 }).exec(function(err, email_data) {\n            if (err) {\n                reject(err)\n            } else if (!email_data) {\n                flag++\n            } else if (email_data._id == req.body.mongo_id) {\n                flag++\n            }\n            resolve({ flag: flag, message: flag ? \"\" : \"Candidate is Already Scheduled\" })\n        })\n    })\n}\n\nlet findEmailByDates = (days) => {\n    return new Promise((resolve, reject) => {\n        db.Imap.update({ fetched_date_till: new Date(), days_left_to_fetched: days }, { where: { active: 1 } }).then((data) => {\n            resolve(data)\n        }).catch((err) => {\n            reject(err)\n        })\n    })\n}\n\nlet sendToNotReplied = (req) => {\n    return new Promise((resolve, reject) => {\n        let sender_mail_array = []\n        db.Tag.findOne({ where: { title: constant().tagType.genuine } }).then((default_tag) => {\n            req.email.find({ tag_id: req.body.tag_id, default_tag: default_tag.id.toString() }, { sender_mail: 1 }).then((sender_mail_data) => {\n                _.forEach(sender_mail_data, (val, key) => {\n                    sender_mail_array.push(val.sender_mail)\n                    if (key == sender_mail_data.length - 1) {\n                        req.email.find({ tag_id: req.body.tag_id.toString(), sender_mail: { $not: { $in: sender_mail_array } }, default_tag: \"\", \"$or\": [{ send_template_count: { \"$exists\": false } }, { send_template_count: { $lte: 3 } }], template_id: { $ne: parseInt(req.body.template_id) } }, { sender_mail: 1, from: 1 }).then((candidate_list) => {\n                            let data = new req.cronWork({ body: req.body.body, subject: req.body.subject, user: req.user.email, tag_id: req.body.tag_id, default_tag: req.body.default_tag, candidate_list: candidate_list, status: 1, work: constant().not_replied, template_id: req.body.template_id, campaign_name: req.body.campaign_name })\n                            data.save(function(err, response) {\n                                resolve({ no_of_candidate: candidate_list.length, message: \"CronWork Is Started...\" })\n                            })\n                        })\n                    }\n                })\n            })\n        })\n    });\n}\n\nlet sendBySelection = (req) => {\n    return new Promise((resolve, reject) => {\n        let sender_mail_array = []\n        let data = new req.cronWork({ body: req.body.body, subject: req.body.subject, user: req.user.email, candidate_list: req.body.emails, status: 1, work: constant().selectedCandidate, template_id: req.body.template_id })\n        data.save(function(err, response) {\n            resolve({ no_of_candidate: req.body.emails.length, message: \"CronWork Is Started...\" })\n        })\n    })\n}\n\nlet insert_note = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.update({ \"_id\": req.body.mongo_id }, { \"$push\": { \"notes\": { $each: [{ note: req.body.note, date: moment(new Date()).format(\"DD-MM-YYYY\"), time: moment(new Date()).format(\"hh:mm:ss a\"), assignee: req.user.email }] } }, unread: false, updatedAt: new Date() }).exec(function(err, result) {\n            if (err) {\n                reject(err)\n            } else {\n                req.email.findOne({ \"_id\": req.body.mongo_id }, { from: 1 }).then((data) => {\n                    let slack_message = \"A note has been added \" + \"\\n\" + \"Candidate Name: \" + data.from + \"\\n\" + \"Assignee: \" + req.user.email + \"\\n\" + \"Note: \" + req.body.note + \"\\n\" + \" On Dated: \" + moment(new Date()).format(\"MMMM Do YYYY, h:mm:ss a\") + \"\\n\" + constant().candidate_url + data._id;\n                    slack.slackNotification(slack_message, req.user.email).then((slack_response) => {\n                        resolve({ error: 0, message: \"Note inserted\", response: result })\n                    })\n                })\n            }\n        })\n    })\n}\n\nlet update_note = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.update({ \"_id\": req.body.mongo_id, \"notes.date\": req.body.note_date, \"notes.time\": req.body.note_time }, { $set: { \"notes.$.note\": req.body.note, \"notes.$.date\": moment(new Date()).format(\"DD-MM-YYYY\"), \"notes.$.time\": moment(new Date()).format(\"hh:mm:ss a\") }, unread: false }).exec(function(err, result) {\n            if (err) {\n                reject(err)\n            } else {\n                if (result.nModified) {\n                    resolve({ error: 0, message: \"Note updated\" })\n                } else {\n                    resolve({ error: 0, message: \"Note not found\" })\n                }\n            }\n        })\n    })\n}\n\nlet cron_status = (req) => {\n    return new Promise((resolve, reject) => {\n        findCronStatus(req.body, function(response) {\n            resolve(response)\n        })\n    })\n\n    function findCronStatus(data, callback) {\n        findPendingCandidate(data, function(pending_candidate_status) {\n            sendToAll(data, function(send_to_all_status) {\n                notRepliedCandidate(data, function(notRepliedCandidate) {\n                    let response = {\n                        pending_candidate_status: pending_candidate_status,\n                        send_to_all_status: send_to_all_status,\n                        notRepliedCandidate: notRepliedCandidate\n                    }\n                    callback(response)\n                })\n            })\n        })\n    }\n\n    function findPendingCandidate(data, callback) {\n        req.cronWork.find({ status: 1, work: constant().pending_work, tag_id: data.tag_id.toString }).then((pending_candidate) => {\n            let count = 0;\n            if (pending_candidate.length) {\n                _.forEach(pending_candidate, (val, key) => {\n                    count += val.get('candidate_list').length;\n                    if (key == pending_candidate.length - 1) {\n                        callback(count)\n                    }\n                })\n            } else {\n                callback(count)\n            }\n        })\n    }\n\n    function sendToAll(data, callback) {\n        req.cronWork.find({ status: 1, work: constant().sendToAll, tag_id: data.tag_id.toString }).then((pending_candidate) => {\n            let count = 0;\n            if (pending_candidate.length) {\n                let count = 0;\n                _.forEach(pending_candidate, (val, key) => {\n                    count += val.get('candidate_list').length;\n                    if (key == pending_candidate.length - 1) {\n                        callback(count)\n                    }\n                })\n            } else {\n                callback(count)\n            }\n        })\n    }\n\n    function notRepliedCandidate(data, callback) {\n        req.cronWork.find({ status: 1, work: constant().not_replied, tag_id: data.tag_id.toString }).then((pending_candidate) => {\n            let count = 0;\n            if (pending_candidate.length) {\n                _.forEach(pending_candidate, (val, key) => {\n                    count += val.get('candidate_list').length;\n                    if (key == pending_candidate.length - 1) {\n                        callback(count)\n                    }\n                })\n            } else {\n                callback(count)\n            }\n        })\n    }\n}\n\nlet archiveEmails = (body, source, target) => {\n    return new Promise((resolve, reject) => {\n        source.find({ tag_id: body.tag_id }).then((mails) => {\n            target.insertMany(mails).then((write_reponse) => {\n                source.remove({ tag_id: body.tag_id || [] }).then((response) => {\n                    resolve({ status: 1, message: \"All Emails are moved to Archived\" })\n                })\n            })\n        })\n    })\n}\n\nlet fetchTrackingData = (req) => {\n    return new Promise((resolve, reject) => {\n        let result = []\n        req.emailTrack.find().distinct('campaign_name').then((campaign_list) => {\n            if (campaign_list.length) {\n                findCampaignData(campaign_list, function(response) {\n                    resolve(response)\n                })\n            } else {\n                resolve({ message: \"no campaign found!!\" })\n            }\n        })\n\n        function findCampaignData(campaign_list, callback) {\n            let campaign_name = campaign_list.splice(0, 1)[0];\n            req.emailTrack.findOne({ campaign_name: campaign_name }, { body: 1, subject: 1, tag_id: 1 }).then((body) => {\n                req.emailTrack.find({ campaign_name: campaign_name }, { candidate_email: 1, sent_time: 1, seen: 1, view_time: 1 }).sort({ sent_time: -1 }).then((campaign_data) => {\n                    findSeenCount(campaign_data, function(seenCount) {\n                        result.push({ campaign_name: campaign_name, count: seenCount, data: campaign_data, body: body });\n                        if (campaign_list.length) {\n                            findCampaignData(campaign_list, callback)\n                        } else {\n                            callback(result)\n                        }\n                    })\n                })\n            })\n        }\n\n        function findSeenCount(campaign_data, callback) {\n            let seen = 0;\n            _.forEach(campaign_data, (val, key) => {\n                if (val.get('seen')) {\n                    seen++\n                }\n                if (key == campaign_data.length - 1) {\n                    callback({ total: campaign_data.length, seen: seen, percentage: Math.ceil((seen / campaign_data.length) * 100) })\n                }\n            })\n        }\n    })\n}\n\nlet sendEmailToNotviewed = (req) => {\n    return new Promise((resolve, reject) => {\n        req.emailTrack.find({ campaign_name: req.body.old_campaign_name, $or: [{ seen: false }, { seen: { $exists: false } }] }).then((notViewedCandidate) => {\n            if (notViewedCandidate.length) {\n                findCandidateEmail(notViewedCandidate, function(response) {\n                    let details = new req.cronWork({\n                        subject: req.body.subject,\n                        body: req.body.body,\n                        tag_id: req.body.tag_id,\n                        candidate_list: response,\n                        status: 1,\n                        template_id: req.body.template_id || \"\",\n                        work: constant().resendEmail,\n                        campaign_name: req.body.campaign_name\n                    })\n                    details.save(function(err, result) {\n                        resolve(result)\n                    })\n                })\n            } else {\n                resolve({ message: \"All messages are viewed\" })\n            }\n\n        })\n\n        function findCandidateEmail(notViewedCandidate, callback) {\n            let candidate_mail = []\n            _.forEach(notViewedCandidate, (val, key) => {\n                candidate_mail.push({ email: val.get('candidate_email') });\n                if (key == notViewedCandidate.length - 1) {\n                    callback(candidate_mail)\n                }\n            })\n        }\n    })\n}\n\nlet assignAnInterviewee = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.update({ _id: req.body.mongo_id }, { interviewee: req.body.interviewee, unread: false, updatedAt: new Date() }).then((response) => {\n            resolve(response)\n        })\n    });\n}\n\nlet getCandidateByInterviewee = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.find({ interviewee: req.user.id }, { \"_id\": 1, \"date\": 1, \"email_date\": 1, \"uid\": 1, \"is_automatic_email_send\": 1, \"from\": 1, \"sender_mail\": 1, \"subject\": 1, \"unread\": 1, \"attachment\": 1, \"tag_id\": 1, \"is_attachment\": 1, \"default_tag\": 1, \"mobile_no\": 1, \"interviewee\": 1 }, { sort: { date: -1 } }).then((data) => {\n            resolve(data)\n        })\n    });\n}\n\nlet deleteCampaign = (req) => {\n    return new Promise((resolve, reject) => {\n        req.emailTrack.remove({ campaign_name: req.params.campaign_name }, function(err) {\n            if (!err) {\n                resolve({ message: \"campaign sucessfully deleted\" })\n            }\n        })\n    });\n}\n\nlet starEmail = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.findOne({ _id: req.body.mongo_id }).then((data) => {\n            if (req.params.star == 'true') {\n                req.email.update({ _id: req.body.mongo_id }, { $addToSet: { candiate_star: req.user.id }, unread: false }).then((data) => {\n                    resolve({ status: 1, data: data })\n                }, (err) => { reject(err) })\n            } else if (req.params.star == 'false') {\n                req.email.update({ _id: req.body.mongo_id }, { $pull: { candiate_star: req.user.id }, unread: false }).then((data) => {\n\n                    resolve({ status: 1, data: data })\n                }, (err) => { reject(err) })\n            }\n        })\n    });\n}\n\nlet getStaredEmails = (email, user_id) => {\n    return new Promise((resolve, reject) => {\n        email.find({ candidate_star: { $in: [user_id] } }).then((data) => {\n            resolve({ status: 1, data: data })\n        }, (err) => { reject(err) })\n    })\n}\n\nlet candidateArchive = (req) => {\n    return new Promise((resolve, reject) => {\n        req.email.find({ sender_mail: req.params.email }).then((data) => {\n            req.archived.insertMany(data).then((response) => {\n                if (response) {\n                    req.email.find({ sender_mail: req.params.email }).remove().then((mailArchived) => {\n                        resolve({ status: 1, message: \"Candidate Archived\" })\n                    }, (err) => { reject(err) });\n                }\n            }, (err) => { reject(err) })\n        }, (err) => { reject(err) })\n    });\n}\nexport default {\n    fetchEmail,\n    findcount,\n    assignMultiple,\n    fetchById,\n    sendToMany,\n    sendToSelectedTag,\n    mailAttachment,\n    deleteEmail,\n    deleteTag,\n    getShedule,\n    assignToOldTag,\n    assignToNewTag,\n    getFetchedMailCount,\n    app_get_candidate,\n    checkEmailStatus,\n    findEmailByDates,\n    sendToNotReplied,\n    sendBySelection,\n    insert_note,\n    update_note,\n    cron_status,\n    archiveEmails,\n    fetchTrackingData,\n    sendEmailToNotviewed,\n    assignAnInterviewee,\n    getCandidateByInterviewee,\n    deleteCampaign,\n    starEmail,\n    getStaredEmails,\n    candidateArchive\n}"]}