{"version":3,"sources":["../../src/modules/candidateHistory.js"],"names":["checkHistoryMsg","seqno","flag","uid","answered","email_data_to_store","tag","body","attach","email","candidate_history","Promise","resolve","reject","findOne","sender_mail","then","response","imap_email","to","history_saved","history_data","email_id","from","date","email_date","email_timestamp","subject","unread","tag_id","tagId","is_automatic_email_send","default_tag","default_tag_id","is_attachment","send_template_count","count","template_id","reply_to_id","attachment","save","err","update","_id","Date","updated_candidate_mail","console","log"],"mappings":";;;;;AAAA,IAAIA,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,IAAR,EAAcC,GAAd,EAAmBC,QAAnB,EAA6BC,mBAA7B,EAAkDC,GAAlD,EAAuDC,IAAvD,EAA6DC,MAA7D,EAAqEC,KAArE,EAA4EC,iBAA5E,EAAkG;AACpH,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,cAAMK,OAAN,CAAc,EAAEC,aAAaV,oBAAoBU,WAAnC,EAAd,EAAgEC,IAAhE,CAAqE,UAACC,QAAD,EAAc;AAC/E,gBAAIA,QAAJ,EAAc;AACVP,kCAAkBI,OAAlB,CAA0B,EAAEX,KAAKA,GAAP,EAAYe,YAAYb,oBAAoBc,EAA5C,EAA1B,EAA4EH,IAA5E,CAAiF,UAACI,aAAD,EAAmB;AAChG,wBAAIA,aAAJ,EAAmB;AACfR,gCAAQ,CAAR;AACH,qBAFD,MAEO;AACH,4BAAIS,eAAe,IAAIX,iBAAJ,CAAsB;AACrCY,sCAAUrB,KAD2B;AAErCsB,kCAAMlB,oBAAoBkB,IAFW;AAGrCJ,gCAAId,oBAAoBc,EAHa;AAIrCJ,yCAAaV,oBAAoBU,WAJI;AAKrCS,kCAAMnB,oBAAoBmB,IALW;AAMrCC,wCAAYpB,oBAAoBoB,UANK;AAOrCC,6CAAiBrB,oBAAoBqB,eAPA;AAQrCC,qCAAStB,oBAAoBsB,OARQ;AASrCC,oCAAQ,IAT6B;AAUrCxB,sCAAUA,QAV2B;AAWrCD,iCAAKA,GAXgC;AAYrCI,kCAAMA,IAZ+B;AAarCsB,oCAAQvB,IAAIwB,KAbyB;AAcrCC,qDAAyBzB,IAAIyB,uBAAJ,IAA+B,CAdnB;AAerCC,yCAAa1B,IAAI2B,cAAJ,IAAsB,EAfE;AAgBrCC,2CAAe1B,UAAU,KAhBY;AAiBrCU,wCAAYb,oBAAoBc,EAjBK;AAkBrCgB,iDAAqB7B,IAAI8B,KAAJ,IAAa,CAlBG;AAmBrCC,yCAAa/B,IAAI+B,WAAJ,IAAmB,EAnBK;AAoBrCC,yCAAahC,IAAIgC,WApBoB;AAqBrCC,wCAAY;AArByB,yBAAtB,CAAnB;;AAwBAlB,qCAAamB,IAAb,CAAkB,UAASC,GAAT,EAAc;AAC5B,gCAAInC,IAAI2B,cAAR,EAAwB;AACpBxB,sCAAMiC,MAAN,CAAa,EAAEC,KAAK1B,SAAS0B,GAAhB,EAAb,EAAoC,EAAE,QAAQ,EAAE,UAAU,IAAZ,EAAkB,aAAa,IAAIC,IAAJ,EAA/B,EAA2CZ,aAAa1B,IAAI2B,cAA5D,EAAV,EAApC,EAA8HjB,IAA9H,CAAmI,UAAC6B,sBAAD,EAA4B;AAC3JC,4CAAQC,GAAR,CAAY,SAAZ,EAAuB9B,SAAS0B,GAAhC;AACA/B,4CAAQ,CAAR;AACH,iCAHD;AAIH,6BALD,MAKO;AACHH,sCAAMiC,MAAN,CAAa,EAAEC,KAAK1B,SAAS0B,GAAhB,EAAb,EAAoC,EAAE,QAAQ,EAAE,UAAU,IAAZ,EAAkB,aAAa,IAAIC,IAAJ,EAA/B,EAAV,EAApC,EAA6F5B,IAA7F,CAAkG,UAAC6B,sBAAD,EAA4B;AAC1HC,4CAAQC,GAAR,CAAY,SAAZ,EAAuB9B,SAAS0B,GAAhC;AACA/B,4CAAQ,CAAR;AACH,iCAHD;AAIH;AACJ,yBAZD;AAaH;AACJ,iBA1CD;AA4CH,aA7CD,MA6CO;AACHA,wBAAQ,CAAR;AACH;AACJ,SAjDD;AAkDH,KAnDM,CAAP;AAoDH,CArDD;;kBAuDe;AACXZ;AADW,C","file":"candidateHistory.js","sourcesContent":["let checkHistoryMsg = (seqno, flag, uid, answered, email_data_to_store, tag, body, attach, email, candidate_history) => {\n    return new Promise((resolve, reject) => {\n        email.findOne({ sender_mail: email_data_to_store.sender_mail }).then((response) => {\n            if (response) {\n                candidate_history.findOne({ uid: uid, imap_email: email_data_to_store.to }).then((history_saved) => {\n                    if (history_saved) {\n                        resolve(1)\n                    } else {\n                        let history_data = new candidate_history({\n                            email_id: seqno,\n                            from: email_data_to_store.from,\n                            to: email_data_to_store.to,\n                            sender_mail: email_data_to_store.sender_mail,\n                            date: email_data_to_store.date,\n                            email_date: email_data_to_store.email_date,\n                            email_timestamp: email_data_to_store.email_timestamp,\n                            subject: email_data_to_store.subject,\n                            unread: true,\n                            answered: answered,\n                            uid: uid,\n                            body: body,\n                            tag_id: tag.tagId,\n                            is_automatic_email_send: tag.is_automatic_email_send || 0,\n                            default_tag: tag.default_tag_id || \"\",\n                            is_attachment: attach || false,\n                            imap_email: email_data_to_store.to,\n                            send_template_count: tag.count || 0,\n                            template_id: tag.template_id || [],\n                            reply_to_id: tag.reply_to_id,\n                            attachment: []\n                        })\n\n                        history_data.save(function(err) {\n                            if (tag.default_tag_id) {\n                                email.update({ _id: response._id }, { \"$set\": { \"unread\": true, \"updatedAt\": new Date(), default_tag: tag.default_tag_id } }).then((updated_candidate_mail) => {\n                                    console.log(\"updated\", response._id)\n                                    resolve(1)\n                                })\n                            } else {\n                                email.update({ _id: response._id }, { \"$set\": { \"unread\": true, \"updatedAt\": new Date() } }).then((updated_candidate_mail) => {\n                                    console.log(\"updated\", response._id)\n                                    resolve(1)\n                                })\n                            }\n                        })\n                    }\n                })\n\n            } else {\n                resolve(0)\n            }\n        })\n    })\n}\n\nexport default {\n    checkHistoryMsg\n}"]}