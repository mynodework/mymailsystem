{"version":3,"sources":["../../src/modules/automaticTags.js"],"names":["module","exports","tags","mongodb","subject","email_date","name","to","from","logs","reply_to","send_to","Promise","resolve","reject","count","tagId","template_id","is_email_send","findOne","reply_to_id","then","genuine","Tag","where","title","tagType","data","get_email_already_save","length","default_tag_id","id","toString","is_automatic_email_send","email_id","callback","sender_mail","tag_id","limit","sort","date","exec","err","response","catch","error","findAll","type","automatic","forEach","val","key","undefined","match","RegExp","Date","getTime","email","push","Template","default","parent_id","map","x","parseInt","result","assignTagByKeyword","keyword_response","filter","body","html","Smtp","status","smtp","send_automatic_tags_email","sendMail","text","emailLog","message","tagid"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB;AACbC,UAAM,cAASC,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6CC,EAA7C,EAAiDC,IAAjD,EAAuDC,IAAvD,EAA6DC,QAA7D,EAAuEC,OAAvE,EAAgF;AAClF,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIC,QAAQ,CAAZ;AACA,gBAAIC,QAAQ,EAAZ;AACA,gBAAIC,cAAc,EAAlB;AACA,gBAAIC,gBAAgB,CAApB;AACAf,oBAAQgB,OAAR,CAAgB,EAAEC,aAAaV,QAAf,EAAhB,EAA2CW,IAA3C,CAAgD,UAACC,OAAD,EAAa;AACzD,oBAAIA,OAAJ,EAAa;AACT,iCAAGC,GAAH,CAAOJ,OAAP,CAAe,EAAEK,OAAO,EAAEC,OAAO,0BAAWC,OAAX,CAAmBJ,OAA5B,EAAT,EAAf,EACKD,IADL,CACU,UAACM,IAAD,EAAU;AACZC,+CAAuBrB,EAAvB,EAA2B,UAASS,KAAT,EAAgB;AACvC,gCAAIA,MAAMa,MAAV,EAAkB;AACdhB,wCAAQ,EAAEG,OAAOA,KAAT,EAAgBc,gBAAgBH,KAAKI,EAAL,CAAQC,QAAR,EAAhC,EAAoDC,yBAAyB,CAA7E,EAAR;AACH,6BAFD,MAEO;AACHpB,wCAAQ,EAAEG,OAAO,EAAT,EAAac,gBAAgBH,KAAKI,EAAL,CAAQC,QAAR,EAA7B,EAAiDC,yBAAyB,CAA1E,EAAR;AACH;AACJ,yBAND;;AAQA,iCAASL,sBAAT,CAAgCM,QAAhC,EAA0CC,QAA1C,EAAoD;AAChDhC,oCAAQgB,OAAR,CAAgB,EAAEiB,aAAaF,QAAf,EAAyBG,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAX,EAAV,EAAjC,EAAhB,EAA+EC,KAA/E,CAAqF,CAArF,EAAwFC,IAAxF,CAA6F,EAAEC,MAAM,CAAC,CAAT,EAA7F,EAA2GC,IAA3G,CAAgH,UAASC,GAAT,EAAcC,QAAd,EAAwB;AACpI,oCAAIA,QAAJ,EAAc;AACVR,6CAASQ,SAASN,MAAlB;AACH,iCAFD,MAEO;AACHF,6CAAS,EAAT;AACH;AAEJ,6BAPD;AAQH;AAEJ,qBArBL,EAsBKS,KAtBL,CAsBW,UAACC,KAAD,EAAW;AAAE/B,+BAAO+B,KAAP;AAAe,qBAtBvC;AAuBH,iBAxBD,MAwBO;AACH,iCAAGtB,GAAH,CAAOuB,OAAP,CAAe,EAAEtB,OAAO,EAAEuB,MAAM,0BAAWrB,OAAX,CAAmBsB,SAA3B,EAAT,EAAf,EACK3B,IADL,CACU,UAACM,IAAD,EAAU;AACZ,4BAAIA,IAAJ,EAAU;AACN,6CAAEsB,OAAF,CAAUtB,IAAV,EAAgB,UAACuB,GAAD,EAAMC,GAAN,EAAc;AAC1B,oCAAI,CAAE/C,WAAWgD,SAAX,GAAuBhD,QAAQiD,KAAR,CAAc,IAAIC,MAAJ,CAAWJ,IAAI9C,OAAf,EAAwB,IAAxB,CAAd,CAAvB,GAAsE,KAAxE,KAAqF8C,IAAI3C,EAAJ,IAAU2C,IAAI1C,IAAf,IAAyB,IAAI+C,IAAJ,CAASlD,UAAT,EAAqBmD,OAArB,KAAiC,IAAID,IAAJ,CAASL,IAAI3C,EAAb,EAAiBiD,OAAjB,EAAjC,IAA+D,IAAID,IAAJ,CAASlD,UAAT,EAAqBmD,OAArB,KAAiC,IAAID,IAAJ,CAASL,IAAI1C,IAAb,EAAmBgD,OAAnB,EAA7M,IAAiPN,IAAIO,KAAL,IAAgBlD,GAAG8C,KAAH,CAAS,IAAIC,MAAJ,CAAWJ,IAAIO,KAAf,EAAsB,IAAtB,CAAT,CAApQ,EAA6S;AACzSzC,0CAAM0C,IAAN,CAAWR,IAAInB,EAAJ,CAAOC,QAAP,EAAX;AACAf,gDAAYyC,IAAZ,CAAiBR,IAAIjC,WAArB;AACA,wCAAI,CAACC,aAAD,IAAkBgC,IAAIhC,aAA1B,EACIA,gBAAgBgC,IAAIhC,aAApB;AACP;AACJ,6BAPD;AAQA,gCAAIY,iBAAiB,EAArB;AACA,yCAAG6B,QAAH,CAAYxC,OAAZ,CAAoB;AAChBK,uCAAO;AACHO,wCAAId,YAAY,CAAZ;AADD;AADS,6BAApB,EAIGI,IAJH,CAIQ,UAACM,IAAD,EAAU;AACd,6CAAGJ,GAAH,CAAOuB,OAAP,CAAe,EAAEtB,OAAO,EAAEuB,MAAM,0BAAWrB,OAAX,CAAmBkC,OAA3B,EAAoCC,WAAW,EAAE,OAAO7C,MAAM8C,GAAN,CAAU,UAASC,CAAT,EAAY;AAAE,uDAAOC,SAASD,CAAT,EAAY,EAAZ,CAAP;AAAyB,6CAAjD,CAAT,EAA/C,EAAT,EAAf,EACK1C,IADL,CACU,UAAC4C,MAAD,EAAY;AACd,qDAAEhB,OAAF,CAAUgB,MAAV,EAAkB,UAACf,GAAD,EAAMC,GAAN,EAAc;AAC5B,4CAAK/C,QAAQiD,KAAR,CAAc,IAAIC,MAAJ,CAAWJ,IAAI9C,OAAf,EAAwB,IAAxB,CAAd,CAAD,IAAoD8C,IAAI3C,EAAJ,IAAU2C,IAAI1C,IAAf,IAAyB,IAAI+C,IAAJ,CAASlD,UAAT,EAAqBmD,OAArB,KAAiC,IAAID,IAAJ,CAASL,IAAI3C,EAAb,EAAiBiD,OAAjB,EAAjC,IAA+D,IAAID,IAAJ,CAASlD,UAAT,EAAqBmD,OAArB,KAAiC,IAAID,IAAJ,CAASL,IAAI1C,IAAb,EAAmBgD,OAAnB,EAA5K,IAAgNN,IAAIO,KAAL,IAAgBlD,GAAG8C,KAAH,CAAS,IAAIC,MAAJ,CAAWJ,IAAIO,KAAf,EAAsB,IAAtB,CAAT,CAAnO,EAA4Q;AACxQ3B,6DAAiBoB,IAAInB,EAAJ,CAAOC,QAAP,EAAjB;AACH;AACJ,qCAJD;AAKA,wCAAIL,QAAQ,IAAZ,EAAkB;AACd,4CAAIX,MAAMa,MAAN,IAAgB,CAApB,EAAuB;AACnB,yDAAGN,GAAH,CAAO2C,kBAAP,CAA0B9D,OAA1B,EAAmCiB,IAAnC,CAAwC,UAAC8C,gBAAD,EAAsB;AAC1DnD,wDAAQmD,gBAAR;AACA,0EAAQC,MAAR,CAAezC,KAAK0C,IAApB,EAA0B/D,IAA1B,EAAgCU,MAAM,CAAN,CAAhC,EACKK,IADL,CACU,UAACiD,IAAD,EAAU;AACZ,iEAAGC,IAAH,CAAQpD,OAAR,CAAgB,EAAEK,OAAO,EAAEgD,QAAQ,CAAV,EAAT,EAAhB,EACKnD,IADL,CACU,UAACoD,IAAD,EAAU;AACZ,4DAAI,iBAAOC,yBAAP,KAAqC,IAArC,IAA6C/D,OAA7C,IAAwDO,aAA5D,EAA2E;AACvE,2EAAKyD,QAAL,CAAcpE,EAAd,EAAkBoB,KAAKvB,OAAvB,EAAgC,0BAAWqE,IAAX,CAAgBG,IAAhD,EAAsDH,IAAtD,EAA4DH,IAA5D,EAAkE,IAAlE,EACKjD,IADL,CACU,UAACsB,QAAD,EAAc;AAChBA,yEAAS,QAAT,IAAqB3B,KAArB;AACA,oFAAU6D,QAAV,CAAmBpE,IAAnB,EAAyBkC,QAAzB,EACKtB,IADL,CACU,UAACM,IAAD,EAAU;AACZ,wEAAIgB,SAAS6B,MAAb,EAAqB;AACjB3D,gFAAQ,EAAEiE,SAAS,2BAAX,EAAwC9D,OAAOA,KAA/C,EAAsDiB,yBAAyB,CAA/E,EAAkFlB,OAAO,CAAzF,EAA4FE,aAAaA,YAAY,CAAZ,CAAzG,EAAyHG,aAAauB,SAASjC,QAA/I,EAAyJoB,gBAAgBA,cAAzK,EAAR;AACH,qEAFD,MAEO;AACHjB,gFAAQ,EAAEiE,SAAS,+BAAX,EAA4C9D,OAAOA,KAAnD,EAA0DiB,yBAAyB,CAAnF,EAAsFH,gBAAgBA,cAAtG,EAAR;AACH;AACJ,iEAPL;AAQH,6DAXL;AAaH,yDAdD,MAcO;AACHjB,oEAAQ,EAAEiE,SAAS,iBAAX,EAA8B9D,OAAOA,KAArC,EAA4Cc,gBAAgBA,cAA5D,EAAR;AACH;AACJ,qDAnBL;AAoBH,iDAtBL;AAuBH,6CAzBD;AA0BH,yCA3BD,MA2BO;AACH,sEAAQsC,MAAR,CAAezC,KAAK0C,IAApB,EAA0B/D,IAA1B,EAAgCU,MAAM,CAAN,CAAhC,EACKK,IADL,CACU,UAACiD,IAAD,EAAU;AACZ,6DAAGC,IAAH,CAAQpD,OAAR,CAAgB,EAAEK,OAAO,EAAEgD,QAAQ,CAAV,EAAT,EAAhB,EACKnD,IADL,CACU,UAACoD,IAAD,EAAU;AACZ,wDAAI,iBAAOC,yBAAP,KAAqC,IAArC,IAA6C/D,OAA7C,IAAwDO,aAA5D,EAA2E;AACvE,uEAAKyD,QAAL,CAAcpE,EAAd,EAAkBoB,KAAKvB,OAAvB,EAAgC,0BAAWqE,IAAX,CAAgBG,IAAhD,EAAsDH,IAAtD,EAA4DH,IAA5D,EAAkE,IAAlE,EACKjD,IADL,CACU,UAACsB,QAAD,EAAc;AAChBA,qEAAS,QAAT,IAAqB3B,KAArB;AACA,gFAAU6D,QAAV,CAAmBpE,IAAnB,EAAyBkC,QAAzB,EACKtB,IADL,CACU,UAACM,IAAD,EAAU;AACZ,oEAAIgB,SAAS6B,MAAb,EAAqB;AACjB3D,4EAAQ,EAAEiE,SAAS,2BAAX,EAAwC9D,OAAOA,KAA/C,EAAsDiB,yBAAyB,CAA/E,EAAkFlB,OAAO,CAAzF,EAA4FE,aAAaA,YAAY,CAAZ,CAAzG,EAAyHG,aAAauB,SAASjC,QAA/I,EAAyJoB,gBAAgBA,cAAzK,EAAR;AACH,iEAFD,MAEO;AACHjB,4EAAQ,EAAEiE,SAAS,+BAAX,EAA4C9D,OAAOA,KAAnD,EAA0DiB,yBAAyB,CAAnF,EAAsFH,gBAAgBA,cAAtG,EAAR;AACH;AACJ,6DAPL;AAQH,yDAXL;AAaH,qDAdD,MAcO;AACHjB,gEAAQ,EAAEiE,SAAS,iBAAX,EAA8B9D,OAAOA,KAArC,EAA4Cc,gBAAgBA,cAA5D,EAAR;AACH;AACJ,iDAnBL;AAoBH,6CAtBL;AAuBH;AACJ,qCArDD,MAqDO;AACH,4CAAId,MAAMa,MAAN,IAAgB,CAApB,EAAuB;AACnBhB,oDAAQ,EAAEiE,SAAS,gBAAX,EAA6B9D,OAAOA,KAApC,EAA2Cc,gBAAgBA,cAA3D,EAAR;AACH,yCAFD,MAEO;AACH,yDAAGP,GAAH,CAAO2C,kBAAP,CAA0B9D,OAA1B,EAAmCiB,IAAnC,CAAwC,UAAC8C,gBAAD,EAAsB;AAC1DnD,wDAAQmD,gBAAR;AACAtD,wDAAQ,EAAEiE,SAAS,gBAAX,EAA6B9D,OAAOA,KAApC,EAAR;AACH,6CAHD;AAIH;AACJ;AACJ,iCAtEL;AAuEH,6BA5ED;AA6EH,yBAvFD,MAuFO;AACHH,oCAAQ,EAAEkE,OAAO,EAAT,EAAR;AACH;AACJ,qBA5FL;AA6FH;AACJ,aAxHD;AA0HH,SA/HM,CAAP;AAgIH;AAlIY,CAAjB","file":"automaticTags.js","sourcesContent":["import db from \"../db\"\nimport _ from \"lodash\";\nimport constant from \"../models/constant\";\nimport mail from \"../modules/mail\";\nimport replace from \"../modules/replaceVariable\";\nimport config from \"../config\";\nimport email_log from \"../service/emaillogs\"\n\nmodule.exports = {\n    tags: function(mongodb, subject, email_date, name, to, from, logs, reply_to, send_to) {\n        return new Promise((resolve, reject) => {\n            let count = 0;\n            let tagId = [];\n            let template_id = [];\n            let is_email_send = 0;\n            mongodb.findOne({ reply_to_id: reply_to }).then((genuine) => {\n                if (genuine) {\n                    db.Tag.findOne({ where: { title: constant().tagType.genuine } })\n                        .then((data) => {\n                            get_email_already_save(to, function(tagId) {\n                                if (tagId.length) {\n                                    resolve({ tagId: tagId, default_tag_id: data.id.toString(), is_automatic_email_send: 1 })\n                                } else {\n                                    resolve({ tagId: [], default_tag_id: data.id.toString(), is_automatic_email_send: 1 })\n                                }\n                            })\n\n                            function get_email_already_save(email_id, callback) {\n                                mongodb.findOne({ sender_mail: email_id, tag_id: { \"$not\": { \"$size\": 0 } } }).limit(1).sort({ date: -1 }).exec(function(err, response) {\n                                    if (response) {\n                                        callback(response.tag_id)\n                                    } else {\n                                        callback([])\n                                    }\n\n                                })\n                            }\n\n                        })\n                        .catch((error) => { reject(error) })\n                } else {\n                    db.Tag.findAll({ where: { type: constant().tagType.automatic } })\n                        .then((data) => {\n                            if (data) {\n                                _.forEach(data, (val, key) => {\n                                    if (((subject != undefined ? subject.match(new RegExp(val.subject, 'gi')) : false)) || ((val.to && val.from) && (new Date(email_date).getTime() < new Date(val.to).getTime() && new Date(email_date).getTime() > new Date(val.from).getTime())) || ((val.email) && (to.match(new RegExp(val.email, 'gi'))))) {\n                                        tagId.push(val.id.toString())\n                                        template_id.push(val.template_id);\n                                        if (!is_email_send && val.is_email_send)\n                                            is_email_send = val.is_email_send;\n                                    }\n                                })\n                                let default_tag_id = \"\";\n                                db.Template.findOne({\n                                    where: {\n                                        id: template_id[0]\n                                    }\n                                }).then((data) => {\n                                    db.Tag.findAll({ where: { type: constant().tagType.default, parent_id: { \"$in\": tagId.map(function(x) { return parseInt(x, 10); }) } } })\n                                        .then((result) => {\n                                            _.forEach(result, (val, key) => {\n                                                if ((subject.match(new RegExp(val.subject, 'gi'))) || ((val.to && val.from) && (new Date(email_date).getTime() < new Date(val.to).getTime() && new Date(email_date).getTime() > new Date(val.from).getTime())) || ((val.email) && (to.match(new RegExp(val.email, 'gi'))))) {\n                                                    default_tag_id = val.id.toString();\n                                                }\n                                            })\n                                            if (data != null) {\n                                                if (tagId.length == 0) {\n                                                    db.Tag.assignTagByKeyword(subject).then((keyword_response) => {\n                                                        tagId = keyword_response\n                                                        replace.filter(data.body, name, tagId[0])\n                                                            .then((html) => {\n                                                                db.Smtp.findOne({ where: { status: 1 } })\n                                                                    .then((smtp) => {\n                                                                        if (config.send_automatic_tags_email === true && send_to && is_email_send) {\n                                                                            mail.sendMail(to, data.subject, constant().smtp.text, smtp, html, true)\n                                                                                .then((response) => {\n                                                                                    response['tag_id'] = tagId;\n                                                                                    email_log.emailLog(logs, response)\n                                                                                        .then((data) => {\n                                                                                            if (response.status) {\n                                                                                                resolve({ message: \"Tempate Send Successfully\", tagId: tagId, is_automatic_email_send: 1, count: 1, template_id: template_id[0], reply_to_id: response.reply_to, default_tag_id: default_tag_id })\n                                                                                            } else {\n                                                                                                resolve({ message: \"Tempate Not Send Successfully\", tagId: tagId, is_automatic_email_send: 0, default_tag_id: default_tag_id })\n                                                                                            }\n                                                                                        })\n                                                                                })\n\n                                                                        } else {\n                                                                            resolve({ message: \"Email Not Send \", tagId: tagId, default_tag_id: default_tag_id })\n                                                                        }\n                                                                    })\n                                                            });\n                                                    })\n                                                } else {\n                                                    replace.filter(data.body, name, tagId[0])\n                                                        .then((html) => {\n                                                            db.Smtp.findOne({ where: { status: 1 } })\n                                                                .then((smtp) => {\n                                                                    if (config.send_automatic_tags_email === true && send_to && is_email_send) {\n                                                                        mail.sendMail(to, data.subject, constant().smtp.text, smtp, html, true)\n                                                                            .then((response) => {\n                                                                                response['tag_id'] = tagId;\n                                                                                email_log.emailLog(logs, response)\n                                                                                    .then((data) => {\n                                                                                        if (response.status) {\n                                                                                            resolve({ message: \"Tempate Send Successfully\", tagId: tagId, is_automatic_email_send: 1, count: 1, template_id: template_id[0], reply_to_id: response.reply_to, default_tag_id: default_tag_id })\n                                                                                        } else {\n                                                                                            resolve({ message: \"Tempate Not Send Successfully\", tagId: tagId, is_automatic_email_send: 0, default_tag_id: default_tag_id })\n                                                                                        }\n                                                                                    })\n                                                                            })\n\n                                                                    } else {\n                                                                        resolve({ message: \"Email Not Send \", tagId: tagId, default_tag_id: default_tag_id })\n                                                                    }\n                                                                })\n                                                        });\n                                                }\n                                            } else {\n                                                if (tagId.length != 0) {\n                                                    resolve({ message: \"Email Not send\", tagId: tagId, default_tag_id: default_tag_id })\n                                                } else {\n                                                    db.Tag.assignTagByKeyword(subject).then((keyword_response) => {\n                                                        tagId = keyword_response\n                                                        resolve({ message: \"Email Not send\", tagId: tagId })\n                                                    })\n                                                }\n                                            }\n                                        })\n                                })\n                            } else {\n                                resolve({ tagid: [] })\n                            }\n                        })\n                }\n            })\n\n        })\n    }\n};"]}