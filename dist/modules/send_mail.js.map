{"version":3,"sources":["../../src/modules/send_mail.js"],"names":["module","exports","send_mail","subject","text","html","filename","content","smtp_info","Promise","resolve","reject","mailer","createTransport","host","smtp_server","port","parseInt","server_port","auth","user","username","pass","password","sendMail","from","email","to","template","attachments","error","response","message","status","email_response","body","close","updateMails","find","updatedAt","limit","then","data","length","forEach","val","key","update","_id","$set","date","updated","err"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB;AACbC,eAAW,mBAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,EAAiDC,SAAjD,EAA4D;AACnE,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIC,SAAS,qBAAWC,eAAX,CAA2B,uCAAc;AAClDC,sBAAMN,UAAUO,WADkC;AAElDC,sBAAMC,SAAST,UAAUU,WAAnB,CAF4C;AAGlDC,sBAAM;AACFC,0BAAMZ,UAAUa,QADd;AAEFC,0BAAMd,UAAUe;AAFd;AAH4C,aAAd,CAA3B,CAAb;AAQAX,mBAAOY,QAAP,CAAgB;AACZC,sBAAMjB,UAAUkB,KADJ;AAEZC,oBAAInB,UAAUkB,KAFF;AAGZvB,yBAASA,OAHG;AAIZyB,0BAAUxB,QAAQ,EAJN;AAKZC,sBAAMA,IALM;AAMZwB,6BAAa,CAAC;AACVvB,8BAAUA,QADA;AAEVC,6BAASA;AAFC,iBAAD;AAND,aAAhB,EAUG,UAACuB,KAAD,EAAQC,QAAR,EAAqB;AACpB,oBAAID,KAAJ,EAAW;AACPnB,2BAAO,+BAAP;AACH,iBAFD,MAEO;AACHD,4BAAQ,EAAEsB,SAAS,4BAAX,EAAyCC,QAAQ,CAAjD,EAAoDC,gBAAgBH,QAApE,EAA8E5B,SAASA,OAAvF,EAAgGgC,MAAM9B,IAAtG,EAAR;AACH;AACDO,uBAAOwB,KAAP;AACH,aAjBD;AAkBH,SA3BM,CAAP;AA4BH,KA9BY;;AAgCbC,iBAAa,qBAASX,KAAT,EAAgB;AACzB,eAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCe,kBAAMY,IAAN,CAAW,EAAEC,WAAW,EAAE,WAAW,KAAb,EAAb,EAAX,EAAgDC,KAAhD,CAAsD,IAAtD,EAA4DC,IAA5D,CAAiE,UAACC,IAAD,EAAU;AACvE,oBAAIA,KAAKC,MAAL,IAAe,CAAnB,EAAsB;AAClB,qCAAEC,OAAF,CAAUF,IAAV,EAAgB,UAACG,GAAD,EAAMC,GAAN,EAAc;AAC1BpB,8BAAMqB,MAAN,CAAa,EAAEC,KAAKH,IAAIG,GAAX,EAAb,EAA+B,EAAEC,MAAM,EAAEV,WAAWM,IAAIK,IAAjB,EAAR,EAA/B,EAAkET,IAAlE,CAAuE,UAACU,OAAD,EAAa;AAChF,gCAAIL,OAAOJ,KAAKC,MAAL,GAAc,CAAzB,EAA4B;AACxBjC,wCAAQ,SAAR;AACH;AACJ,yBAJD;AAKH,qBAND;AAOH,iBARD,MAQO;AACHC,2BAAO,wBAAP;AACH;AACJ,aAZD,EAYG,UAACyC,GAAD,EAAS;AAAEzC,uBAAOyC,GAAP;AAAa,aAZ3B;AAaH,SAdM,CAAP;AAeH;AAhDY,CAAjB","file":"send_mail.js","sourcesContent":["import nodemailer from \"nodemailer\";\nimport smtpTransport from \"nodemailer-smtp-transport\";\nimport config from \"../config\";\nimport constant from \"../models/constant\";\nimport smtp from \"../models/\";\nimport _ from \"lodash\";\n\nmodule.exports = {\n    send_mail: function(subject, text, html, filename, content, smtp_info) {\n        return new Promise((resolve, reject) => {\n            let mailer = nodemailer.createTransport(smtpTransport({\n                host: smtp_info.smtp_server,\n                port: parseInt(smtp_info.server_port),\n                auth: {\n                    user: smtp_info.username,\n                    pass: smtp_info.password\n                }\n            }));\n            mailer.sendMail({\n                from: smtp_info.email,\n                to: smtp_info.email,\n                subject: subject,\n                template: text || \"\",\n                html: html,\n                attachments: [{\n                    filename: filename,\n                    content: content\n                }]\n            }, (error, response) => {\n                if (error) {\n                    reject(\"message not sent successfully\");\n                } else {\n                    resolve({ message: \"messsage sent successfully\", status: 1, email_response: response, subject: subject, body: html });\n                }\n                mailer.close();\n            });\n        })\n    },\n\n    updateMails: function(email) {\n        return new Promise((resolve, reject) => {\n            email.find({ updatedAt: { \"$exists\": false } }).limit(2000).then((data) => {\n                if (data.length != 0) {\n                    _.forEach(data, (val, key) => {\n                        email.update({ _id: val._id }, { $set: { updatedAt: val.date } }).then((updated) => {\n                            if (key == data.length - 1) {\n                                resolve(\"updated\")\n                            }\n                        })\n                    })\n                } else {\n                    reject(\"all emails are updated\")\n                }\n            }, (err) => { reject(err) })\n        })\n    }\n}"]}