{"version":3,"sources":["../../src/controllers/fetchEmail.js"],"names":["_","FetchController","fetch","req","res","next","params","page","tag_id","limit","body","type","keyword","selected","default_id","is_attach","_db","Tag","findAll","where","then","default_tag","fetchEmail","email","user","data","message","handleSuccessResponse","status","count","length","catch","handleErrorResponse","bind","assignTag","mongo_id","findOne","id","findOneAndUpdate","email_timestamp","Date","getTime","exec","err","Error","countEmail","findcount","assignMultiple","changeUnreadStatus","checkBody","getValidationResult","console","log","emailLog","email_status","response","deleteTag","deleteEmail","result","toLowerCase","find","_id","update","unread","read_email_time","read_by_user","error","mailAttachment","history","findByTagId","fetchById","getCount","sendToMany","subject","emails","sendToSelectedTag","fetchByButton","emailLogs","spamBox","app_get_candidate","registration_id","logs","sort","skip","parseInt","searchLogs","emailStatus","checkEmailStatus","fetchByDates","findEmailByDates","days","sendToNotReplied","sendBySelection","insert_note","update_note","cron_status","archiveEmails","archived","markAsUnread","getByMongoId","tracking","emailTrack","tracking_id","$or","seen","$exists","view_time","fetchTrackingData","sendEmailToNotviewed","json","addNewCandidate","create","assignAnInterviewee","getCandidateByInterviewee","deleteCampaign","starEmail","getStaredEmails","candidateArchive","controller"],"mappings":"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","file":"fetchEmail.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport MailProvider from \"../providers/MailProvider\";\nimport Attachment from \"../modules/getAttachment\";\nimport imap from \"../service/imap\";\nimport * as _ from \"lodash\";\nimport inbox from \"../inbox\";\nimport db from \"../db\";\nimport mail from \"../modules/mail\";\nimport constant from \"../models/constant\";\nimport replaceData from \"../modules/replaceVariable\";\nimport email_process from \"../mongodb/emailprocess\";\nimport logs from \"../service/emaillogs\";\n\n\nexport class FetchController extends BaseAPIController {\n    /* Get INBOX data */\n    fetch = (req, res, next) => {\n        let { page, tag_id, limit } = req.params;\n        let { type, keyword, selected, default_id, is_attach } = req.body;\n        this._db.Tag.findAll({ where: { type: \"Default\" } })\n            .then((default_tag) => {\n                email_process.fetchEmail(page, tag_id, limit, type, keyword, selected, default_id, default_tag, req.email, is_attach, req.user)\n                    .then((data, message) => {\n                        this.handleSuccessResponse(req, res, next, {\n                            data: data,\n                            status: 1,\n                            count: req.count,\n                            message: (data.length) ? \"SUCCESS\" : \"No Emails Found\"\n                        })\n                    })\n                    .catch(this.handleErrorResponse.bind(null, res))\n            })\n            .catch(this.handleErrorResponse.bind(null, res))\n    }\n\n    assignTag = (req, res, next) => {\n        let { tag_id, mongo_id } = req.params;\n        this._db.Tag.findOne({ where: { id: tag_id } })\n            .then((data) => {\n                if (data.id) {\n                    req.email.findOneAndUpdate({ \"_id\": mongo_id }, { \"$addToSet\": { \"tag_id\": tag_id }, email_timestamp: new Date().getTime() }).exec((err, data) => {\n                        if (err) {\n                            next(new Error(err));\n                        } else {\n                            this.handleSuccessResponse(req, res, next, {\n                                data: data,\n                                status: 1,\n                                message: \"success\"\n                            });\n                        }\n                    });\n                } else {\n                    next(new Error(\"invalid tag id\"));\n                }\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    countEmail = (req, res, next) => {\n        email_process.findcount(req.email)\n            .then((data) => { this.handleSuccessResponse(req, res, next, data) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    assignMultiple = (req, res, next) => {\n        let where;\n        MailProvider.changeUnreadStatus(req.checkBody, req.body, req.getValidationResult())\n            .then(() => {\n                let { tag_id } = req.params;\n                email_process.assignMultiple(tag_id, req.body, req.email, req)\n                    .then((data) => {\n                        console.log(data)\n                        logs.emailLog(req, data.email_status)\n                            .then((response) => {\n                                this.handleSuccessResponse(req, res, next, data)\n                            })\n                    })\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n    deleteTag = (req, res, next) => {\n        MailProvider.deleteEmail(req.checkBody, req.body, req.getValidationResult())\n            .then(() => {\n                email_process.deleteTag(req.params.tag_id, req.body.mongo_id, req.email)\n                    .then((result) => {\n                        this.handleSuccessResponse(req, res, next, result)\n                    })\n                    .catch(this.handleErrorResponse(null, res));\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    changeUnreadStatus = (req, res, next) => {\n        let { mongo_id } = req.params;\n        let status = (req.params.status + '').toLowerCase() === 'true'\n        req.email.find({ _id: mongo_id }, (err) => {\n            if (err) {\n                next(new Error(err));\n            } else if (status == false) {\n                req.email.update({ _id: mongo_id }, { unread: status, read_email_time: new Date(), read_by_user: req.user.email }, (error) => {\n                    if (error) {\n                        next(new Error(err));\n                    } else {\n                        this.handleSuccessResponse(req, res, next, { status: 1, message: \"the unread status is successfully changed to \" + req.params.status });\n                    }\n                });\n            } else {\n                this.handleSuccessResponse(req, res, next, { status: 0, message: \"the unread status is not changed successfully,  you have to set status true or false\" });\n            }\n        });\n    }\n\n    deleteEmail = (req, res, next) => {\n        MailProvider.deleteEmail(req.checkBody, req.body, req.getValidationResult())\n            .then(() => {\n                email_process.deleteEmail(req.params.tag_id, req.body.mongo_id, req.email)\n                    .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n                    .catch(this.handleErrorResponse(null, res))\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    mailAttachment = (req, res, next) => {\n        email_process.mailAttachment(req.params.mongo_id, req.email, req.history)\n            .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n    findByTagId = (req, res, next, tag_id) => {\n        let { type, keyword, selected, default_id, is_attach } = req.body;\n        email_process.fetchById(type, keyword, selected, default_id, tag_id, is_attach)\n            .then((data) => {\n                this.getCount(req, res, next, data)\n            })\n    }\n\n    sendToMany = (req, res, next) => {\n        let { subject, body, tag_id, default_id } = req.body;\n        email_process.sendToMany(req, req.body.emails, subject, body, tag_id, default_id, req.email)\n            .then((response) => {\n                this.handleSuccessResponse(req, res, next, response)\n            })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    sendToSelectedTag = (req, res, next) => {\n        email_process.sendToSelectedTag(req, req.body.tag_id, req.email)\n            .then((result) => { this.handleSuccessResponse(req, res, next, result) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    fetchByButton = (req, res, next) => {\n        inbox.fetchEmail(req.email, req.emailLogs, req.spamBox, req.history, 'apiCall')\n            .then((data) => { this.handleSuccessResponse(req, res, next, { status: 1, message: \"success\" }) })\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    app_get_candidate = (req, res, next) => {\n        email_process.app_get_candidate(req.email, req.body.registration_id)\n            .then((result) => { this.handleSuccessResponse(req, res, next, { error: 0, message: \"\", data: result }) })\n            .catch((err) => { this.handleSuccessResponse(req, res, next, err) })\n    }\n\n    logs = (req, res, next) => {\n        let { page, limit } = req.params;\n        req.emailLogs.find().sort({ _id: -1 }).skip((page - 1) * parseInt(limit)).limit(parseInt(limit)).exec()\n            .then((result) => {\n                req.emailLogs.count().exec()\n                    .then((count) => {\n                        this.handleSuccessResponse(req, res, next, { error: 0, message: \"\", data: result, count: count })\n                    })\n            })\n            .catch((err) => { this.handleSuccessResponse(req, res, next, err) })\n    }\n\n    searchLogs = (req, res, next) => {\n        let { page, email, limit } = req.params;\n        req.emailLogs.find({ email: { \"$regex\": email } }).sort({ _id: -1 }).skip((page - 1) * parseInt(limit)).limit(parseInt(limit)).exec()\n            .then((result) => {\n                req.emailLogs.count({ email: { \"$regex\": email } }).exec()\n                    .then((count) => {\n                        if (count)\n                            this.handleSuccessResponse(req, res, next, { error: 0, message: \"\", data: result, count: count })\n                        else\n                            this.handleSuccessResponse(req, res, next, { error: 0, message: \"No Result Found\", data: [], count: count })\n                    })\n            })\n            .catch((err) => { this.handleSuccessResponse(req, res, next, err) })\n    }\n\n    emailStatus = (req, res, next) => {\n        email_process.checkEmailStatus(req)\n            .then((response) => this.handleSuccessResponse(req, res, next, response))\n            .catch(this.handleErrorResponse.bind(null, res))\n    }\n\n    fetchByDates = (req, res, next) => {\n        email_process.findEmailByDates(req.params.days, req.email).then((response) => {\n            this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" })\n        }).catch((err) => { console.log(err) })\n    }\n\n    sendToNotReplied = (req, res, next) => {\n        email_process.sendToNotReplied(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    sendBySelection = (req, res, next) => {\n        email_process.sendBySelection(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    insert_note = (req, res, next) => {\n        email_process.insert_note(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    update_note = (req, res, next) => {\n        email_process.update_note(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    cron_status = (req, res, next) => {\n        if (req.body.tag_id) {\n            email_process.cron_status(req).then((response) => {\n                this.handleSuccessResponse(req, res, next, response)\n            })\n        } else {\n            this.handleErrorResponse(res, \"NO tag id found\", next)\n        }\n    }\n\n    archiveEmails = (req, res, next) => {\n        email_process.archiveEmails(req.body, req.email, req.archived).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    markAsUnread = (req, res, next) => {\n        req.email.update({ _id: req.body.mongo_id }, { unread: true }).then((response) => {\n            this.handleSuccessResponse(req, res, next, { message: \"marked as unread\" })\n        })\n    }\n\n    getByMongoId = (req, res, next) => {\n        req.email.findOne({ _id: req.params.mongo_id }).then((response) => {\n            this.handleSuccessResponse(req, res, next, { response })\n        })\n    }\n\n    tracking = (req, res, next) => {\n        req.emailTrack.update({ tracking_id: req.params.tracking_id, $or: [{ seen: false }, { seen: { $exists: false } }] }, { seen: true, view_time: new Date() }).then((response) => {\n            console.log(response)\n        })\n    }\n\n    fetchTrackingData = (req, res, next) => {\n        email_process.fetchTrackingData(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    sendEmailToNotviewed = (req, res, next) => {\n        email_process.sendEmailToNotviewed(req).then((response) => {\n            console.log(response)\n            res.json(response)\n        })\n    }\n\n    addNewCandidate = (req, res, next) => {\n        MailProvider.addNewCandidate(req.checkBody, req.body, req.getValidationResult()).then((body) => {\n            req.email.create(body).then((response) => {\n                this.handleSuccessResponse(req, res, next, response)\n            })\n        }, (err) => { this.handleErrorResponse(res, err, next) })\n    }\n\n    assignAnInterviewee = (req, res, next) => {\n        email_process.assignAnInterviewee(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    getCandidateByInterviewee = (req, res, next) => {\n        email_process.getCandidateByInterviewee(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    deleteCampaign = (req, res, next) => {\n        email_process.deleteCampaign(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    starEmail = (req, res, next) => {\n        email_process.starEmail(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    getStaredEmails = (req, res, next) => {\n        email_process.getStaredEmails(req.email, req.user.id).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    candidateArchive = (req, res, next) => {\n        email_process.candidateArchive(req).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        }).catch(this.handleErrorResponse.bind(null, res));\n    }\n}\n\nconst controller = new FetchController();\nexport default controller;"]}