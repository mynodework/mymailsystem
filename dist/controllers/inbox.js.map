{"version":3,"sources":["../../src/controllers/inbox.js"],"names":["InboxController","getInbox","req","res","next","email","find","skip","params","page","parseInt","limit","sort","date","exec","err","data","Error","handleSuccessResponse","getByEmailId","re","test","emailid","where","sender_mail","_id","final","length","history","then","response","concat","getUid","findOne","uid","controller"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;IAEaA,e,WAAAA,e;;;;;;;;;;;;;;4MAETC,Q,GAAW,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3BF,gBAAIG,KAAJ,CAAUC,IAAV,GAAiBC,IAAjB,CAAsB,CAACL,IAAIM,MAAJ,CAAWC,IAAX,GAAkB,CAAnB,IAAwBC,SAASR,IAAIM,MAAJ,CAAWG,KAApB,CAA9C,EAA0EA,KAA1E,CAAgFD,SAASR,IAAIM,MAAJ,CAAWG,KAApB,CAAhF,EAA4GC,IAA5G,CAAiH;AAC7GC,sBAAM,CAAC;AADsG,aAAjH,EAEGC,IAFH,CAEQ,UAACC,GAAD,EAAMC,IAAN,EAAe;AACnB,oBAAID,GAAJ,EAAS;AACLX,yBAAK,IAAIa,KAAJ,CAAU,cAAV,CAAL;AACH,iBAFD,MAEO;AACH,0BAAKC,qBAAL,CAA2BhB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEY,UAAF,EAA3C;AACH;AACJ,aARD;AASH,S,QAGDG,Y,GAAe,UAACjB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,gBAAIgB,KAAK,cAAT;AACA,gBAAIA,GAAGC,IAAH,CAAQnB,IAAIM,MAAJ,CAAWc,OAAnB,CAAJ,EAAiC;AAC7B,oBAAIC,QAAQ,EAAEC,aAAatB,IAAIM,MAAJ,CAAWc,OAA1B,EAAZ;AACH,aAFD,MAEO;AACHC,wBAAQ,EAAEE,KAAKvB,IAAIM,MAAJ,CAAWc,OAAlB,EAAR;AACH;AACDpB,gBAAIG,KAAJ,CAAUC,IAAV,CAAeiB,KAAf,EAAsBX,IAAtB,CAA2B;AACvBC,sBAAM,CAAC;AADgB,aAA3B,EAEGC,IAFH,CAEQ,UAACC,GAAD,EAAMW,KAAN,EAAgB;AACpB,oBAAIX,GAAJ,EAAS;AACLX,yBAAK,IAAIa,KAAJ,CAAUF,GAAV,CAAL;AACH,iBAFD,MAEO;AACH,wBAAIW,MAAMC,MAAV,EAAkB;AACdzB,4BAAI0B,OAAJ,CAAYtB,IAAZ,CAAiB,EAAEkB,aAAaE,MAAM,CAAN,EAASF,WAAxB,EAAjB,EAAwDZ,IAAxD,CAA6D,EAAEC,MAAM,CAAC,CAAT,EAA7D,EAA2EgB,IAA3E,CAAgF,UAACC,QAAD,EAAc;AAC1F,gCAAId,OAAOU,MAAMK,MAAN,CAAaD,QAAb,CAAX;AACA,kCAAKZ,qBAAL,CAA2BhB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEY,UAAF,EAA3C;AACH,yBAHD;AAIH,qBALD,MAKO;AACH,8BAAKE,qBAAL,CAA2BhB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEsB,YAAF,EAA3C;AACH;AACJ;AACJ,aAfD;AAgBH,S,QAIDM,M,GAAS,UAAC9B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzBF,gBAAIG,KAAJ,CAAU4B,OAAV,CAAkB;AACdC,qBAAKxB,SAASR,IAAIM,MAAJ,CAAW0B,GAApB;AADS,aAAlB,EAEGpB,IAFH,CAEQ,UAACC,GAAD,EAAMC,IAAN,EAAe;AACnB,oBAAID,GAAJ,EAAS;AACLX,yBAAK,IAAIa,KAAJ,CAAU,aAAV,CAAL;AACH,iBAFD,MAEO;AACH,0BAAKC,qBAAL,CAA2BhB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C,EAAEY,UAAF,EAA3C;AACH;AACJ,aARD;AASH,S;;AAnDD;;;AAaA;;;AA2BA;;;;;;AAcJ,IAAMmB,aAAa,IAAInC,eAAJ,EAAnB;kBACemC,U","file":"inbox.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\n\nexport class InboxController extends BaseAPIController {\n    /* Get INBOX data*/\n    getInbox = (req, res, next) => {\n        req.email.find().skip((req.params.page - 1) * parseInt(req.params.limit)).limit(parseInt(req.params.limit)).sort({\n            date: -1\n        }).exec((err, data) => {\n            if (err) {\n                next(new Error(\"invalid page\"));\n            } else {\n                this.handleSuccessResponse(req, res, next, { data });\n            }\n        });\n    }\n\n    /* Get Emails By EmailId*/\n    getByEmailId = (req, res, next) => {\n        var re = /\\S+@\\S+\\.\\S+/;\n        if (re.test(req.params.emailid)) {\n            var where = { sender_mail: req.params.emailid }\n        } else {\n            where = { _id: req.params.emailid }\n        }\n        req.email.find(where).sort({\n            date: -1\n        }).exec((err, final) => {\n            if (err) {\n                next(new Error(err));\n            } else {\n                if (final.length) {\n                    req.history.find({ sender_mail: final[0].sender_mail }).sort({ date: -1 }).then((response) => {\n                        let data = final.concat(response);\n                        this.handleSuccessResponse(req, res, next, { data });\n                    })\n                } else {\n                    this.handleSuccessResponse(req, res, next, { final })\n                }\n            }\n        });\n    }\n\n\n    /* Get UID data*/\n    getUid = (req, res, next) => {\n        req.email.findOne({\n            uid: parseInt(req.params.uid)\n        }).exec((err, data) => {\n            if (err) {\n                next(new Error(\"invalid UID\"));\n            } else {\n                this.handleSuccessResponse(req, res, next, { data });\n            }\n        });\n    }\n}\n\nconst controller = new InboxController();\nexport default controller;"]}