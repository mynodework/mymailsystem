{"version":3,"sources":["../../src/controllers/spamList.js"],"names":["VariableController","create","req","res","next","save","_db","checkBody","body","getValidationResult","then","spamData","SpamList","data","handleSuccessResponse","catch","handleErrorResponse","bind","update","where","id","params","spamListId","docs","status","deletespamList","destroy","spamList","findAll","offset","page","parseInt","limit","order","idResult","getById","getspamListById","findById","response","removeSpam","spamCandidate","email","find","sender_mail","spamEmails","spamBox","insertMany","movedToSpam","remove","spamEmailAdded","controller"],"mappings":"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","file":"spamList.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport SpamListProvider from \"../providers/SpamListProvider.js\";\nimport spamWork from \"../service/spamWork\";\n\nexport class VariableController extends BaseAPIController {\n\n    /* Controller for deletespamList create  */\n    create = (req, res, next) => {\n        SpamListProvider.save(this._db, req.checkBody, req.body, req.getValidationResult())\n            .then((spamData) => {\n                this._db.SpamList.create(spamData)\n                    .then((data) => this.handleSuccessResponse(req, res, next, data))\n                    .catch(this.handleErrorResponse.bind(null, res));\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* deletespamList Update */\n    update = (req, res, next) => {\n        SpamListProvider.save(this._db, req.checkBody, req.body, req.getValidationResult())\n            .then((data) => {\n                this._db.SpamList.update(data, {\n                        where: {\n                            id: req.params.spamListId\n                        }\n                    })\n                    .then((docs) => {\n                        this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n                    })\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n\n    /* deletespamList delete */\n    deletespamList = (req, res, next) => {\n        this._db.SpamList.destroy({\n                where: {\n                    id: req.params.spamListId\n                }\n            })\n            .then((docs) => {\n                this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" });\n            }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    /* Get List of All Templates */\n    spamList = (req, res, next) => {\n        this._db.SpamList.findAll({\n                offset: (req.params.page - 1) * parseInt(req.params.limit),\n                limit: parseInt(req.params.limit),\n                order: '`id` DESC'\n            })\n            .then((data) => this.handleSuccessResponse(req, res, next, data))\n            .catch(this.handleErrorResponse.bind(null, res));\n    }\n\n\n    /* Get Variable data using id*/\n    idResult = (req, res, next, spamListId) => {\n        this.getById(req, res, this._db.SpamList, spamListId, next);\n    }\n\n    getspamListById = (req, res, next) => {\n        this._db.SpamList.findById(parseInt(req.params.spamListId)).then((response) => {\n            this.handleSuccessResponse(req, res, next, response)\n        })\n    }\n\n    /*remove spam from job profiile*/\n\n    removeSpam = (req, res, next) => {\n        spamWork.removeSpam(req, this._db).then((data) => {\n            // req.email.remove({_id:{$in:}})\n            this.handleSuccessResponse(req, res, next, data)\n        }).catch(this.handleErrorResponse.bind(null, res));\n    }\n\n    spamCandidate = (req, res, next) => {\n        req.email.find({ sender_mail: req.params.email }).then((spamEmails) => {\n            req.spamBox.insertMany(spamEmails).then((movedToSpam) => {\n                req.email.find({ sender_mail: req.params.email }).remove().then((response) => {\n                    this._db.SpamList.create({ email: req.params.email }).then((spamEmailAdded) => {\n                        this.handleSuccessResponse(req, res, next, { status: \"SUCCESS\" })\n                    })\n                })\n            })\n        })\n    }\n\n}\n\nconst controller = new VariableController();\nexport default controller;"]}