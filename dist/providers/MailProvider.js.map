{"version":3,"sources":["../../src/providers/MailProvider.js"],"names":["BaseProvider","changeUnreadStatus","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","deleteEmail","addNewCandidate","isEmail","tag_id","toString","Date","date","default_tag","from"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;;;;;AAEA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AAC7D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,UAAT,EAAqB,0BAArB,EAAiDM,QAAjD;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHP,wBAAQH,IAAR;AACH;AACJ,SAND;AAOH,KATM,CAAP;AAUH,CAXD;;AAaA,IAAMW,cAAc,SAAdA,WAAc,CAACZ,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AACtD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,UAAT,EAAqB,0BAArB,EAAiDM,QAAjD;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHP,wBAAQH,IAAR;AACH;AACJ,SAND;AAOH,KATM,CAAP;AAUH,CAXD;;AAaA,IAAMY,kBAAkB,SAAlBA,eAAkB,CAACb,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AAC1D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,SAAT,EAAoB,yBAApB,EAA+CM,QAA/C;AACAN,iBAAS,aAAT,EAAwB,oBAAxB,EAA8CM,QAA9C,GAAyDQ,OAAzD;AACAd,iBAAS,WAAT,EAAsB,2BAAtB,EAAmDM,QAAnD;AACAN,iBAAS,QAAT,EAAmB,wBAAnB,EAA6CM,QAA7C;AACAN,iBAAS,aAAT,EAAwB,6BAAxB,EAAuDM,QAAvD;AACAN,iBAAS,QAAT,EAAmB,wBAAnB,EAA6CM,QAA7C;AACAN,iBAAS,MAAT,EAAiB,gCAAjB,EAAmDM,QAAnD;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHV,qBAAK,QAAL,IAAiB,KAAjB;AACAA,qBAAK,QAAL,IAAiB,CAACA,KAAKc,MAAL,CAAYC,QAAZ,EAAD,CAAjB;AACAf,qBAAK,MAAL,IAAe,IAAIgB,IAAJ,EAAf;AACAhB,qBAAK,YAAL,IAAqBA,KAAKiB,IAA1B;AACAjB,qBAAK,yBAAL,IAAkC,KAAlC;AACAA,qBAAK,YAAL,IAAqB,EAArB;AACAA,qBAAK,aAAL,IAAsBA,KAAKkB,WAAL,GAAmB,CAAnB,GAAuBlB,KAAKkB,WAAL,CAAiBH,QAAjB,EAAvB,GAAqD,EAA3E;AACAf,qBAAK,MAAL,IAAeA,KAAKmB,IAApB;AACAhB,wBAAQH,IAAR;AACH;AACJ,SAdD;AAeH,KAvBM,CAAP;AAwBH,CAzBD;;kBA2Be;AACXH,8BADW;AAEXC,0CAFW;AAGXa,4BAHW;AAIXC;AAJW,C","file":"MailProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\n\nconst changeUnreadStatus = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"mongo_id\", \"mongo_id cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body);\n            }\n        });\n    });\n};\n\nconst deleteEmail = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"mongo_id\", \"mongo_id cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body);\n            }\n        });\n    });\n};\n\nconst addNewCandidate = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"subject\", \"subject cannot be empty\").notEmpty();\n        validate(\"sender_mail\", \"'must be an email'\").notEmpty().isEmail();\n        validate(\"mobile_no\", \"mobile_no cannot be empty\").notEmpty();\n        validate(\"tag_id\", \"tag id cannot be empty\").notEmpty();\n        validate(\"default_tag\", \"default_tag cannot be empty\").notEmpty();\n        validate(\"source\", \"source cannot be empty\").notEmpty();\n        validate(\"from\", \"candidate name cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body['unread'] = false\n                body['tag_id'] = [body.tag_id.toString()]\n                body['date'] = new Date();\n                body['email_date'] = body.date\n                body['is_automatic_email_send'] = false;\n                body['attachment'] = [];\n                body['default_tag'] = body.default_tag > 0 ? body.default_tag.toString() : \"\";\n                body['from'] = body.from;\n                resolve(body);\n            }\n        });\n    });\n};\n\nexport default {\n    BaseProvider,\n    changeUnreadStatus,\n    deleteEmail,\n    addNewCandidate\n};"]}