{"version":3,"sources":["../../src/providers/examsProvider.js"],"names":["BaseProvider","provideQuestions","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","find","options","index","opt_id","answer","provideResult","provideShowResult","search_type","randomNumber","number","Math","floor","random","examTokenLimit","ProvideVerifyOTP","provideExamSubject","addNewCandidate","isEmail","subjectForWalkin","Date","date","from","approveCandidate"],"mappings":"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","file":"examsProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport constant from \"../models/constant\";\nimport _ from \"lodash\";\n\n/* Provider for exam questions */\nconst provideQuestions = (validate, body, validationResult) => new Promise((resolve, reject) => {\n    validate(\"question\", \"question cannot be empty\").notEmpty();\n    validate(\"options\", \"options cannot be empty\").notEmpty();\n    validate(\"job_profile\", \"job_profile cannot be empty\").notEmpty();\n    validate(\"answer\", \"answer cannot be empty\").notEmpty();\n    validate(\"exam_subject\", \"exam_subject cannot be empty\").notEmpty();\n    validationResult.then((result) => {\n        if (!result.isEmpty()) {\n            reject(result.array()[0].msg);\n        } else {\n            if (_.find(body.options, function(index) { return index.opt_id === body.answer; })) {\n                resolve(body)\n            } else {\n                reject(\"options doesn't contains answer\")\n            }\n        }\n    });\n});\n\nconst provideResult = (validate, body, validationResult) => new Promise((resolve, reject) => {\n    validate(\"fb_id\", \"fb_id cannot be empty\").notEmpty();\n    validate(\"job_profile\", \"job_profile cannot be empty\").notEmpty();\n    validate(\"answers\", \"answers cannot be empty\").notEmpty();\n    validate(\"questionIds\", \"questionIds cannot be empty\").notEmpty();\n    validate(\"taken_time_minutes\", \"taken_time_minutes cannot be empty\").notEmpty();\n\n    validationResult.then((result) => {\n        if (!result.isEmpty()) {\n            reject(result.array()[0].msg);\n        } else {\n            resolve(body)\n        }\n    });\n});\n\nconst provideShowResult = (validate, body, validationResult) => new Promise((resolve, reject) => {\n    if (body.search_type == \"email\") {\n        validate(\"user_email\", \"user_email cannot be empty\").notEmpty();\n    } else if (body.search_type == \"name\") {\n        validate(\"name\", \"name cannot be empty\").notEmpty();\n    } else if (body.search_type == \"date\") {\n        validate(\"start_date\", \"start_date cannot be empty\").notEmpty();\n        validate(\"end_date\", \"end_date cannot be empty\").notEmpty();\n    }\n    validationResult.then((result) => {\n        if (!result.isEmpty()) {\n            reject(result.array()[0].msg);\n        } else {\n            resolve(body)\n        }\n    });\n});\n\nconst randomNumber = () => new Promise((resolve, reject) => {\n    let number = Math.floor((Math.random() * constant().examTokenLimit));\n    resolve(number)\n});\n\nconst ProvideVerifyOTP = (validate, body, validationResult) => new Promise((resolve, reject) => {\n    validate(\"fb_id\", \"fb_id cannot be empty\").notEmpty();\n    validate(\"examToken\", \"examToken cannot be empty\").notEmpty();\n    validationResult.then((result) => {\n        if (!result.isEmpty()) {\n            reject(result.array()[0].msg);\n        } else {\n            resolve(body)\n        }\n    });\n});\n\nconst provideExamSubject = (validate, body, validationResult) => new Promise((resolve, reject) => {\n    validate(\"exam_subject\", \"exam_subject cannot be empty\").notEmpty();\n    validationResult.then((result) => {\n        if (!result.isEmpty()) {\n            reject(result.array()[0].msg);\n        } else {\n            resolve(body)\n        }\n    });\n});\n\nconst addNewCandidate = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"sender_mail\", \"'must be an email'\").notEmpty().isEmail();\n        validate(\"mobile_no\", \"mobile_no cannot be empty\").notEmpty();\n        validate(\"source\", \"source cannot be empty\").notEmpty();\n        validate(\"from\", \"candidate name cannot be empty\").notEmpty();\n        validate(\"fb_id\", \"facebook id is required\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body['subject'] = constant().subjectForWalkin\n                body['unread'] = false\n                body['tag_id'] = []\n                body['date'] = new Date();\n                body['email_date'] = body.date\n                body['is_automatic_email_send'] = false;\n                body['attachment'] = [];\n                body['default_tag'] = \"\";\n                body['from'] = body.from;\n                body['candidate_status'] = false;\n                body['body'] = '....';\n                resolve(body);\n            }\n        });\n    });\n};\n\nconst approveCandidate = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"email\", \"there must be an email\").notEmpty().isEmail();\n        validate(\"tag_id\", \"tag_id cannot be empty\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body)\n            }\n        })\n    })\n};\n\nexport default {\n    BaseProvider,\n    provideQuestions,\n    provideResult,\n    provideShowResult,\n    randomNumber,\n    ProvideVerifyOTP,\n    provideExamSubject,\n    addNewCandidate,\n    approveCandidate\n};"]}