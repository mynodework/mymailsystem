{"version":3,"sources":["../src/inbox.js"],"names":["MailParser","require","simpleParser","module","exports","fetchEmail","email","logs","spamBox","candidate_history","apiCall","Promise","resolve","reject","Imap","findAll","where","then","docs","err","forEach","val","key","imapCredential","imap","headers","once","imapConnection","response","delay","yesterday","Date","setTime","now","toISOString","search","results","console","log","UID_arr","find","imap_email","dataValues","sort","email_timestamp","limit","exec","resp","length","row","Last_UID","get","push","count","f","fetch","bodies","struct","on","msg","seqno","flag","uid","unread","answered","attach","attrs","flags","type","stream","buffer","findEmail","mail","email_data_to_store","from","to","sender_mail","date","email_date","subject","body","html","text","textAsHtml","tags","tag","tagId","default_tag_id","getTime","checkHistoryMsg","historyMsg","findOne","data","SpamList","spam_contact","spam_data","detail","email_id","tag_id","is_automatic_email_send","default_tag","is_attachment","genuine_applicant","Genuine_Applicant","send_template_count","template_id","reply_to_id","updatedAt","save","message","catch","chunk","toString","end","error","connect","beforeDateEmail","dateFrom","last_fetched_time","format","current_date","subtract","add","old_emails_fetch_days_count","update","last_updated_time","messages","total","imap_emails","skippedDates","left_days","days_left_to_fetched","fetched_date_till"],"mappings":"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","file":"inbox.js","sourcesContent":["import Imap from \"imap\";\nimport in_array from \"in_array\";\nimport GENERIC from \"./modules/generic\";\nimport _ from \"lodash\";\nimport db from \"./db\";\nimport config from \"./config.js\";\nimport mail from \"./modules/mail\";\nimport replace from \"./modules/replaceVariable\";\nimport automaticTag from \"./modules/automaticTags\";\nimport imapService from \"./service/imap\";\nimport moment from \"moment\";\nimport constant from './models/constant';\nvar MailParser = require(\"mailparser\").simpleParser;\nimport forwardedEmail from \"./modules/forwardedemail\"\nimport history from \"./modules/candidateHistory\";\n\nmodule.exports = {\n    fetchEmail: function(email, logs, spamBox, candidate_history, apiCall) {\n        return new Promise((resolve, reject) => {\n            db.Imap.findAll({\n                where: {\n                    \"active\": true\n                }\n            }).then(function(docs, err) {\n                if (docs) {\n                    _.forEach(docs, (val, key) => {\n                        imapService.imapCredential(val)\n                            .then((imap) => {\n                                var headers = {};\n                                imap.once(\"ready\", function() {\n                                    imapService.imapConnection(imap)\n                                        .then((response) => {\n                                            var delay = 24 * 3600 * 1000;\n                                            var yesterday = new Date();\n                                            yesterday.setTime(Date.now() - delay);\n                                            yesterday = yesterday.toISOString();\n                                            imap.search([\"ALL\", [\"SINCE\", yesterday]], function(err, results) {\n                                                if (err) {\n                                                    console.log(err)\n                                                } else if (results) {\n                                                    let UID_arr = [];\n                                                    email.find({ imap_email: val.dataValues.email }).sort({\n                                                        email_timestamp: -1\n                                                    }).limit(1).exec(function(err, resp) {\n                                                        if (err) {\n                                                            console.log(err);\n                                                        } else {\n                                                            if (resp.length == 0) {\n                                                                UID_arr = results;\n                                                            } else {\n                                                                var row = resp[0];\n                                                                var Last_UID = row.get(\"uid\");\n                                                                _.forEach(results, (val) => {\n                                                                    if (val > Last_UID) {\n                                                                        UID_arr.push(val);\n                                                                    }\n                                                                });\n                                                            }\n                                                            var count = UID_arr.length;\n                                                            if (UID_arr[0] != null) {\n                                                                var f = imap.fetch(UID_arr, {\n                                                                    bodies: \"\",\n                                                                    struct: true\n                                                                });\n                                                                f.on(\"message\", function(msg, seqno) {\n                                                                    let flag = \"\";\n                                                                    let uid = \"\";\n                                                                    let unread\n                                                                    let answered\n                                                                    let attach;\n\n                                                                    msg.once(\"attributes\", function(attrs) {\n                                                                        flag = attrs.flags;\n                                                                        uid = attrs.uid;\n                                                                        unread = !(in_array('\\\\Seen', flag));\n                                                                        answered = in_array(\"\\\\Answered\", flag);\n                                                                        if (attrs.struct[0].type == \"mixed\") {\n                                                                            attach = true;\n                                                                        }\n                                                                    });\n                                                                    msg.on(\"body\", function(stream) {\n                                                                        var buffer = \"\";\n                                                                        MailParser(stream).then(mail => {\n                                                                            forwardedEmail.findEmail(mail)\n                                                                                .then((email_data_to_store) => {\n                                                                                    let { from, to, sender_mail, date, email_date, email_timestamp, subject } = email_data_to_store;\n                                                                                    let body = mail.html || mail.text || mail.textAsHtml\n                                                                                    automaticTag.tags(email, subject, date, from, sender_mail, val.dataValues.email, logs, to, true)\n                                                                                        .then((tag) => {\n                                                                                            if (tag.tagId.length || tag.default_tag_id) {\n                                                                                                if (tag.tagId && tag.tagId.length > 1) {\n                                                                                                    tag.tagId = tag.tagId[0]\n                                                                                                }\n                                                                                                date = new Date(date).getTime()\n                                                                                            }\n                                                                                            history.checkHistoryMsg(seqno, flag, uid, answered, email_data_to_store, tag, body, attach, email, candidate_history).then((historyMsg) => {\n                                                                                                if (!historyMsg) {\n                                                                                                    email.findOne({\n                                                                                                        uid: uid,\n                                                                                                        imap_email: val.dataValues.email\n                                                                                                    }, function(err, data) {\n                                                                                                        --count;\n                                                                                                        if (err) {\n                                                                                                            console.log(err)\n                                                                                                        }\n                                                                                                        if (!data) {\n                                                                                                            db.SpamList.findOne({ where: { email: sender_mail } }).then((spam_contact) => {\n                                                                                                                if (spam_contact) {\n                                                                                                                    spamBox.findOne({\n                                                                                                                        uid: uid,\n                                                                                                                        imap_email: val.dataValues.email\n                                                                                                                    }, function(err, spam_data) {\n                                                                                                                        if (!spam_data) {\n                                                                                                                            let detail = new spamBox({\n                                                                                                                                email_id: seqno,\n                                                                                                                                from: from,\n                                                                                                                                to: to,\n                                                                                                                                sender_mail: sender_mail,\n                                                                                                                                date: date,\n                                                                                                                                email_date: email_date,\n                                                                                                                                email_timestamp: email_timestamp,\n                                                                                                                                subject: subject,\n                                                                                                                                unread: true,\n                                                                                                                                answered: answered,\n                                                                                                                                uid: uid,\n                                                                                                                                body: body,\n                                                                                                                                tag_id: tag.tagId,\n                                                                                                                                is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                                                default_tag: tag.default_tag_id || \"\",\n                                                                                                                                is_attachment: attach || false,\n                                                                                                                                imap_email: val.dataValues.email,\n                                                                                                                                genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                                                send_template_count: tag.count || 0,\n                                                                                                                                template_id: tag.template_id || [],\n                                                                                                                                reply_to_id: tag.reply_to_id,\n                                                                                                                                updatedAt: email_date\n                                                                                                                            })\n                                                                                                                            detail.save(function(err) {\n                                                                                                                                if (err) {\n                                                                                                                                    console.log(\"Duplicate Data\");\n                                                                                                                                } else {\n                                                                                                                                    console.log(\"data saved successfully\");\n                                                                                                                                    if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                                        resolve({ message: \"All data fetched successfully\" });\n                                                                                                                                    } else if (key == docs.length - 1) {\n                                                                                                                                        resolve({ message: \"All data fetched successfully\" })\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            });\n                                                                                                                        }\n                                                                                                                    })\n                                                                                                                } else {\n                                                                                                                    let detail = new email({\n                                                                                                                        email_id: seqno,\n                                                                                                                        from: from,\n                                                                                                                        to: to,\n                                                                                                                        sender_mail: sender_mail,\n                                                                                                                        date: date,\n                                                                                                                        email_date: email_date,\n                                                                                                                        email_timestamp: email_timestamp,\n                                                                                                                        subject: subject,\n                                                                                                                        unread: true,\n                                                                                                                        answered: answered,\n                                                                                                                        uid: uid,\n                                                                                                                        body: body,\n                                                                                                                        tag_id: tag.tagId,\n                                                                                                                        is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                                        default_tag: tag.default_tag_id || \"\",\n                                                                                                                        is_attachment: attach || false,\n                                                                                                                        imap_email: val.dataValues.email,\n                                                                                                                        genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                                        send_template_count: tag.count || 0,\n                                                                                                                        template_id: tag.template_id || [],\n                                                                                                                        reply_to_id: tag.reply_to_id,\n                                                                                                                        updatedAt: email_date\n                                                                                                                    });\n                                                                                                                    detail.save(function(err) {\n                                                                                                                        if (err) {\n                                                                                                                            console.log(\"Duplicate Data\");\n                                                                                                                        } else {\n                                                                                                                            console.log(\"data saved successfully\");\n                                                                                                                            if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                                resolve({ message: \"All data fetched successfully\" });\n                                                                                                                            } else if (key == docs.length - 1) {\n                                                                                                                                resolve({ message: \"All data fetched successfully\" })\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    });\n                                                                                                                }\n\n                                                                                                            })\n                                                                                                        } else {\n                                                                                                            console.log('Data already saved');\n                                                                                                            if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                resolve({ message: \"All data fetched successfully\" });\n                                                                                                            } else if (key == docs.length - 1) {\n                                                                                                                resolve({ message: \"All data fetched successfully\" })\n                                                                                                            }\n                                                                                                        }\n                                                                                                    })\n                                                                                                } else {\n                                                                                                    console.log(\"History Saved\")\n                                                                                                    if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                        resolve({ message: \"All data fetched successfully\" });\n                                                                                                    } else if (key == docs.length - 1) {\n                                                                                                        resolve({ message: \"All data fetched successfully\" })\n                                                                                                    }\n                                                                                                }\n                                                                                            })\n\n                                                                                        })\n                                                                                })\n                                                                        }).catch(err => {\n                                                                            console.log(err);\n                                                                        });\n                                                                        stream.on(\"data\", function(chunk) {\n                                                                            buffer += chunk.toString(\"utf8\");\n                                                                        });\n\n                                                                        stream.once(\"end\", function() {\n\n                                                                        });\n                                                                    });\n                                                                });\n                                                                f.once(\"error\", function(err) {\n                                                                    console.log(\"Fetch error: \" + err);\n                                                                });\n                                                                f.once(\"end\", function() {\n                                                                    console.log(\"Done fetching all messages!\");\n                                                                    imap.end();\n                                                                });\n                                                            } else {\n                                                                console.log(\"Nothing To fetch\")\n                                                                resolve({ message: \"Nothing To fetch\" })\n                                                            }\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                        })\n                                        .catch((error) => {\n                                            console.log(error)\n                                        })\n                                });\n                                imap.once(\"error\", function(err) {\n                                    console.log(err);\n                                });\n                                imap.once(\"end\", function() {\n                                    console.log(\"Connection ended\");\n                                });\n                                imap.connect();\n                            });\n                    });\n                } else {\n                    console.log(err);\n                }\n            })\n        });\n    },\n    beforeDateEmail: function(email, logs, spamBox, candidate_history) {\n        return new Promise((resolve, reject) => {\n            db.Imap.findAll({\n                where: {\n                    \"active\": true\n                }\n            }).then(function(docs, err) {\n                let count = 0;\n                if (docs[0] != null) {\n                    _.forEach(docs, (val, key) => {\n                        imapService.imapCredential(val)\n                            .then((imap) => {\n                                var headers = {};\n                                imap.once(\"ready\", function() {\n                                    imapService.imapConnection(imap)\n                                        .then((response) => {\n                                            let date = '';\n                                            let dateFrom = '';\n                                            var row = val.dataValues;\n                                            if (row && row.last_fetched_time) {\n                                                date = moment(new Date(row.last_fetched_time)).format(\"MMM DD, YYYY\");\n                                                let current_date = moment(new Date()).subtract(1, 'days').format(\"MMM DD, YYYY\");\n                                                if (new Date() <= new Date(date)) {\n                                                    dateFrom = moment(new Date()).subtract(1, 'days').format('MMM DD, YYYY');\n                                                } else {\n                                                    dateFrom = moment(date).add(constant().old_emails_fetch_days_count, 'days').format('MMM DD, YYYY');\n                                                }\n                                            }\n                                            imap.search(['ALL', ['SINCE', date],\n                                                ['BEFORE', dateFrom]\n                                            ], function(err, results) {\n                                                if (err) {\n                                                    console.log(err)\n                                                } else if (results.length) {\n                                                    if (new Date() <= new Date(dateFrom)) {\n                                                        dateFrom = moment(new Date()).subtract(1, 'days').format('YYYY-MM-DD');\n                                                    }\n                                                    db.Imap.update({ last_fetched_time: dateFrom }, { where: { email: val.email } })\n                                                        .then((last_updated_time) => { console.log(\"last time updated\") })\n                                                    count = results.length\n                                                    var f = imap.fetch(results, {\n                                                        bodies: \"\",\n                                                        struct: true\n                                                    });\n                                                    f.on(\"message\", function(msg, seqno) {\n                                                        let flag = \"\";\n                                                        let uid = \"\";\n                                                        let unread\n                                                        let answered\n                                                        let attach;\n\n                                                        msg.once(\"attributes\", function(attrs) {\n                                                            flag = attrs.flags;\n                                                            uid = attrs.uid;\n                                                            unread = !(in_array('\\\\Seen', flag));\n                                                            answered = in_array(\"\\\\Answered\", flag);\n                                                            if (attrs.struct[0].type == \"mixed\") {\n                                                                attach = true;\n                                                            }\n                                                        });\n\n                                                        msg.on(\"body\", function(stream) {\n                                                            var buffer = \"\";\n                                                            MailParser(stream).then(mail => {\n                                                                forwardedEmail.findEmail(mail)\n                                                                    .then((email_data_to_store) => {\n                                                                        let { from, to, sender_mail, date, email_date, email_timestamp, subject } = email_data_to_store;\n                                                                        let body = mail.html || mail.text || mail.textAsHtml\n                                                                        automaticTag.tags(email, subject, date, from, sender_mail, val.dataValues.email, to, false, false)\n                                                                            .then((tag) => {\n                                                                                if (tag.tagId.length || tag.default_tag_id) {\n                                                                                    if (tag.tagId && tag.tagId.length > 1) {\n                                                                                        tag.tagId = tag.tagId[0]\n                                                                                    }\n                                                                                    date = new Date(date).getTime()\n                                                                                }\n                                                                                history.checkHistoryMsg(seqno, flag, uid, answered, email_data_to_store, tag, body, attach, email, candidate_history).then((historyMsg) => {\n                                                                                    if (!historyMsg) {\n                                                                                        email.findOne({\n                                                                                            uid: uid,\n                                                                                            imap_email: val.dataValues.email\n                                                                                        }, function(err, data) {\n                                                                                            --count;\n                                                                                            if (err) {\n                                                                                                console.log(err)\n                                                                                            }\n                                                                                            if (!data) {\n                                                                                                db.SpamList.findOne({ where: { email: sender_mail } }).then((spam_contact) => {\n                                                                                                    if (spam_contact) {\n                                                                                                        spamBox.findOne({\n                                                                                                            uid: uid,\n                                                                                                            imap_email: val.dataValues.email\n                                                                                                        }, function(err, spam_data) {\n                                                                                                            if (!spam_data) {\n                                                                                                                let detail = new spamBox({\n                                                                                                                    email_id: seqno,\n                                                                                                                    from: from,\n                                                                                                                    to: to,\n                                                                                                                    sender_mail: sender_mail,\n                                                                                                                    date: date,\n                                                                                                                    email_date: email_date,\n                                                                                                                    email_timestamp: email_timestamp,\n                                                                                                                    subject: subject,\n                                                                                                                    unread: true,\n                                                                                                                    answered: answered,\n                                                                                                                    uid: uid,\n                                                                                                                    body: body,\n                                                                                                                    tag_id: tag.tagId,\n                                                                                                                    is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                                    default_tag: tag.default_tag_id || \"\",\n                                                                                                                    is_attachment: attach || false,\n                                                                                                                    imap_email: val.dataValues.email,\n                                                                                                                    genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                                    send_template_count: tag.count || 0,\n                                                                                                                    template_id: tag.template_id || [],\n                                                                                                                    reply_to_id: tag.reply_to_id,\n                                                                                                                    updatedAt: email_date\n                                                                                                                })\n                                                                                                                detail.save(function(err) {\n                                                                                                                    if (err) {\n                                                                                                                        console.log(\"Duplicate Data\");\n                                                                                                                    } else {\n                                                                                                                        console.log(\"data saved successfully\");\n                                                                                                                        if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                            resolve({ message: \"All data fetched successfully\" });\n                                                                                                                        } else if (key == docs.length - 1) {\n                                                                                                                            resolve({ message: \"All data fetched successfully\" })\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                });\n                                                                                                            }\n                                                                                                        })\n                                                                                                    } else {\n                                                                                                        let detail = new email({\n                                                                                                            email_id: seqno,\n                                                                                                            from: from,\n                                                                                                            to: to,\n                                                                                                            sender_mail: sender_mail,\n                                                                                                            date: date,\n                                                                                                            email_date: email_date,\n                                                                                                            email_timestamp: email_timestamp,\n                                                                                                            subject: subject,\n                                                                                                            unread: true,\n                                                                                                            answered: answered,\n                                                                                                            uid: uid,\n                                                                                                            body: body,\n                                                                                                            tag_id: tag.tagId,\n                                                                                                            is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                            default_tag: tag.default_tag_id || \"\",\n                                                                                                            is_attachment: attach || false,\n                                                                                                            imap_email: val.dataValues.email,\n                                                                                                            genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                            send_template_count: tag.count || 0,\n                                                                                                            template_id: tag.template_id || [],\n                                                                                                            reply_to_id: tag.reply_to_id,\n                                                                                                            updatedAt: email_date\n                                                                                                        });\n                                                                                                        detail.save(function(err) {\n                                                                                                            if (err) {\n                                                                                                                console.log(\"Duplicate Data\");\n                                                                                                            } else {\n                                                                                                                console.log(\"data saved successfully\");\n                                                                                                                if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                    resolve({ message: \"All data fetched successfully\" });\n                                                                                                                } else if (key == docs.length - 1) {\n                                                                                                                    resolve({ message: \"All data fetched successfully\" })\n                                                                                                                }\n                                                                                                            }\n                                                                                                        });\n                                                                                                    }\n\n                                                                                                })\n                                                                                            } else {\n                                                                                                console.log('Data already saved');\n                                                                                                if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                    resolve({ message: \"All data fetched successfully\" });\n                                                                                                } else if (key == docs.length - 1) {\n                                                                                                    resolve({ message: \"All data fetched successfully\" })\n                                                                                                }\n                                                                                            }\n                                                                                        })\n                                                                                    } else {\n                                                                                        console.log(\"History Saved\")\n                                                                                        if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                            resolve({ message: \"All data fetched successfully\" });\n                                                                                        } else if (key == docs.length - 1) {\n                                                                                            resolve({ message: \"All data fetched successfully\" })\n                                                                                        }\n                                                                                    }\n                                                                                })\n                                                                            })\n                                                                    })\n                                                            }).catch(err => {\n                                                                console.log(err);\n                                                            });\n                                                            stream.on(\"data\", function(chunk) {\n                                                                buffer += chunk.toString(\"utf8\");\n                                                            });\n\n                                                            stream.once(\"end\", function() {\n\n                                                            });\n                                                        });\n                                                    });\n                                                    f.once(\"error\", function(err) {\n                                                        console.log(\"Fetch error: \" + err);\n                                                    });\n                                                    f.once(\"end\", function() {\n                                                        console.log(\"Done fetching all messages!\");\n                                                        imap.end();\n                                                    });\n                                                } else {\n                                                    email.find({ imap_email: val.dataValues.email }).count().exec(function(err, count) {\n                                                        if (count >= response.messages.total) {\n                                                            console.log('Nothing to Fetch');\n                                                        } else {\n                                                            db.Imap.update({ last_fetched_time: dateFrom }, { where: { email: val.email } })\n                                                                .then((last_updated_time) => { console.log(\"last time updated\") })\n                                                        }\n                                                    })\n                                                }\n                                            });\n                                        })\n                                        .then((error) => {\n                                            console.log(error)\n                                        })\n                                });\n                                imap.once(\"error\", function(err) {\n                                    console\n                                        .log(err);\n                                });\n                                imap.once(\"end\", function() {\n                                    console.log(\"Connection ended\");\n                                });\n                                imap.connect();\n                            });\n                        if (!count && (key == docs.length - 1)) {\n                            let imap_emails = [];\n                            _.forEach(docs, (email, key) => {\n                                imap_emails.push(email.email)\n                            })\n                        }\n                    });\n                } else {\n                    console.log(\"No Active connection\")\n                }\n            });\n        });\n    },\n\n    skippedDates: function(email, logs, spamBox, candidate_history) {\n        return new Promise((resolve, reject) => {\n            let count;\n            db.Imap.findAll({\n                where: {\n                    \"active\": true\n                }\n            }).then(function(docs, err) {\n                if (docs[0] != null) {\n                    _.forEach(docs, (val, key) => {\n                        imapService.imapCredential(val)\n                            .then((imap) => {\n                                let headers = {};\n                                imap.once(\"ready\", function() {\n                                    imapService.imapConnection(imap)\n                                        .then((response) => {\n                                            let date = '';\n                                            let dateFrom = '';\n                                            let row = val.dataValues;\n                                            let left_days;\n                                            if (row.days_left_to_fetched) {\n                                                if (!row.fetched_date_till) {\n                                                    row.fetched_date_till = new Date();\n                                                }\n                                                date = moment(new Date(row.fetched_date_till)).format(\"MMM DD, YYYY\");\n                                                dateFrom = moment(date).subtract(constant().old_emails_fetch_days_count, 'days').format('MMM DD, YYYY');\n                                                left_days = row.days_left_to_fetched - constant().old_emails_fetch_days_count;\n                                                imap.search(['ALL', ['SINCE', dateFrom],\n                                                    ['BEFORE', date]\n                                                ], function(err, results) {\n                                                    if (err) {\n                                                        console.log(err)\n                                                    } else if (results.length) {\n                                                        db.Imap.update({ fetched_date_till: dateFrom, days_left_to_fetched: left_days }, { where: { email: val.email } })\n                                                            .then((last_updated_time) => { console.log(\"last time updated\") })\n                                                        count = results.length\n                                                        let f = imap.fetch(results, {\n                                                            bodies: \"\",\n                                                            struct: true\n                                                        });\n                                                        f.on(\"message\", function(msg, seqno) {\n                                                            let flag = \"\";\n                                                            let uid = \"\";\n                                                            let unread\n                                                            let answered\n                                                            let attach;\n\n                                                            msg.once(\"attributes\", function(attrs) {\n                                                                flag = attrs.flags;\n                                                                uid = attrs.uid;\n                                                                unread = !(in_array('\\\\Seen', flag));\n                                                                answered = in_array(\"\\\\Answered\", flag);\n                                                                if (attrs.struct[0].type == \"mixed\") {\n                                                                    attach = true;\n                                                                }\n                                                            });\n\n\n                                                            msg.on(\"body\", function(stream) {\n                                                                var buffer = \"\";\n                                                                MailParser(stream).then(mail => {\n                                                                    forwardedEmail.findEmail(mail)\n                                                                        .then((email_data_to_store) => {\n                                                                            let { from, to, sender_mail, date, email_date, email_timestamp, subject } = email_data_to_store;\n                                                                            let body = mail.html || mail.text || mail.textAsHtml\n                                                                            automaticTag.tags(email, subject, date, from, sender_mail, val.dataValues.email, logs, to, true)\n                                                                                .then((tag) => {\n                                                                                    if (tag.tagId.length || tag.default_tag_id) {\n                                                                                        if (tag.tagId && tag.tagId.length > 1) {\n                                                                                            tag.tagId = tag.tagId[0]\n                                                                                        }\n                                                                                        date = new Date(date).getTime()\n                                                                                    }\n                                                                                    history.checkHistoryMsg(seqno, flag, uid, answered, email_data_to_store, tag, body, attach, email, candidate_history).then((historyMsg) => {\n                                                                                        if (!historyMsg) {\n                                                                                            email.findOne({\n                                                                                                uid: uid,\n                                                                                                imap_email: val.dataValues.email\n                                                                                            }, function(err, data) {\n                                                                                                --count;\n                                                                                                if (err) {\n                                                                                                    console.log(err)\n                                                                                                }\n                                                                                                if (!data) {\n                                                                                                    db.SpamList.findOne({ where: { email: sender_mail } }).then((spam_contact) => {\n                                                                                                        if (spam_contact) {\n                                                                                                            spamBox.findOne({\n                                                                                                                uid: uid,\n                                                                                                                imap_email: val.dataValues.email\n                                                                                                            }, function(err, spam_data) {\n                                                                                                                if (!spam_data) {\n                                                                                                                    let detail = new spamBox({\n                                                                                                                        email_id: seqno,\n                                                                                                                        from: from,\n                                                                                                                        to: to,\n                                                                                                                        sender_mail: sender_mail,\n                                                                                                                        date: date,\n                                                                                                                        email_date: email_date,\n                                                                                                                        email_timestamp: email_timestamp,\n                                                                                                                        subject: subject,\n                                                                                                                        unread: true,\n                                                                                                                        answered: answered,\n                                                                                                                        uid: uid,\n                                                                                                                        body: body,\n                                                                                                                        tag_id: tag.tagId,\n                                                                                                                        is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                                        default_tag: tag.default_tag_id || \"\",\n                                                                                                                        is_attachment: attach || false,\n                                                                                                                        imap_email: val.dataValues.email,\n                                                                                                                        genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                                        send_template_count: tag.count || 0,\n                                                                                                                        template_id: tag.template_id || [],\n                                                                                                                        reply_to_id: tag.reply_to_id,\n                                                                                                                        updatedAt: email_date\n                                                                                                                    })\n                                                                                                                    detail.save(function(err) {\n                                                                                                                        if (err) {\n                                                                                                                            console.log(\"Duplicate Data\");\n                                                                                                                        } else {\n                                                                                                                            console.log(\"data saved successfully\");\n                                                                                                                            if (!count && (key == docs.length - 1)) {\n                                                                                                                                resolve({ message: \"All data fetched successfully\" });\n                                                                                                                            } else if (key == docs.length - 1) {\n                                                                                                                                resolve({ message: \"All data fetched successfully\" })\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    });\n                                                                                                                }\n                                                                                                            })\n                                                                                                        } else {\n                                                                                                            let detail = new email({\n                                                                                                                email_id: seqno,\n                                                                                                                from: from,\n                                                                                                                to: to,\n                                                                                                                sender_mail: sender_mail,\n                                                                                                                date: date,\n                                                                                                                email_date: email_date,\n                                                                                                                email_timestamp: email_timestamp,\n                                                                                                                subject: subject,\n                                                                                                                unread: true,\n                                                                                                                answered: answered,\n                                                                                                                uid: uid,\n                                                                                                                body: body,\n                                                                                                                tag_id: tag.tagId,\n                                                                                                                is_automatic_email_send: tag.is_automatic_email_send || 0,\n                                                                                                                default_tag: tag.default_tag_id || \"\",\n                                                                                                                is_attachment: attach || false,\n                                                                                                                imap_email: val.dataValues.email,\n                                                                                                                genuine_applicant: GENERIC.Genuine_Applicant(subject),\n                                                                                                                send_template_count: tag.count || 0,\n                                                                                                                template_id: tag.template_id || [],\n                                                                                                                reply_to_id: tag.reply_to_id,\n                                                                                                                updatedAt: email_date\n                                                                                                            });\n                                                                                                            detail.save(function(err) {\n                                                                                                                if (err) {\n                                                                                                                    console.log(\"Duplicate Data\");\n                                                                                                                } else {\n                                                                                                                    console.log(\"data saved successfully\");\n                                                                                                                    if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                                        resolve({ message: \"All data fetched successfully\" });\n                                                                                                                    } else if (key == docs.length - 1) {\n                                                                                                                        resolve({ message: \"All data fetched successfully\" })\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n\n                                                                                                    })\n                                                                                                } else {\n                                                                                                    console.log('Data already saved');\n                                                                                                    if (!count && (key == docs.length - 1)) {\n                                                                                                        resolve({ message: \"All data fetched successfully\" });\n                                                                                                    } else if (key == docs.length - 1) {\n                                                                                                        resolve({ message: \"All data fetched successfully\" })\n                                                                                                    }\n                                                                                                }\n                                                                                            })\n                                                                                        } else {\n                                                                                            console.log(\"History Saved\")\n                                                                                            if (!count && apiCall && (key == docs.length - 1)) {\n                                                                                                resolve({ message: \"All data fetched successfully\" });\n                                                                                            } else if (key == docs.length - 1) {\n                                                                                                resolve({ message: \"All data fetched successfully\" })\n                                                                                            }\n                                                                                        }\n                                                                                    })\n\n                                                                                }, (err) => console.log(err))\n                                                                        })\n                                                                }).catch(err => {\n                                                                    console.log(err);\n                                                                });\n                                                                stream.on(\"data\", function(chunk) {\n                                                                    buffer += chunk.toString(\"utf8\");\n                                                                });\n\n                                                                stream.once(\"end\", function() {\n\n                                                                });\n                                                            });\n                                                        });\n                                                        f.once(\"error\", function(err) {\n                                                            console.log(\"Fetch error: \" + err);\n                                                        });\n                                                        f.once(\"end\", function() {\n                                                            console.log(\"Done fetching all messages!\");\n                                                            imap.end();\n                                                        });\n                                                    } else {\n                                                        email.find({ imap_email: val.dataValues.email }).count().exec(function(err, count) {\n                                                            if (count >= response.messages.total) {\n                                                                console.log('Nothing to Fetch');\n                                                                resolve()\n                                                            } else {\n\n                                                                db.Imap.update({ fetched_date_till: dateFrom, days_left_to_fetched: left_days }, { where: { email: val.email } })\n                                                                    .then((last_updated_time) => {\n                                                                        console.log(\"last time updated\")\n                                                                        resolve()\n                                                                    })\n                                                            }\n                                                        })\n                                                    }\n                                                });\n                                            } else {\n                                                resolve(\"nothing in pending\")\n                                            }\n\n                                        })\n                                        .then((error) => {\n                                            console.log(error)\n                                        })\n                                });\n                                imap.once(\"error\", function(err) {\n                                    console.log(err);\n                                });\n                                imap.once(\"end\", function() {\n                                    console.log(\"Connection ended\");\n                                });\n                                imap.connect();\n                            });\n                        if (!count && (key == docs.length - 1)) {\n                            let imap_emails = [];\n                            _.forEach(docs, (email, key) => {\n                                imap_emails.push(email.email)\n                            })\n                        }\n                    });\n                } else {\n                    console.log(\"No Active connection\")\n                    resolve()\n                }\n            });\n        })\n    }\n};"]}