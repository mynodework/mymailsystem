{"version":3,"sources":["../../src/service/cron.js"],"names":["inbox","require","CronJob","CronController","email","logs","spamInbox","candidate_history","fetchEmail","then","response","skippedDates","data","beforeDateEmail","reminderMail","console","log","cron_service","emailTrack","sendEmailToPendingCandidate","sendEmailToNotRepliedCandidate","email_status","sendToSelected","selected_response","sendToAll","send_to_all_response","resendEmail","resend_email_status","controller"],"mappings":";;;;;;;;;AAEA;;;;;;;;AAFA,IAAIA,QAAQC,QAAQ,UAAR,CAAZ;AACA,IAAIC,UAAUD,QAAQ,MAAR,EAAgBC,OAA9B;;IAGaC,c,WAAAA,c;;;;;;;6BACJC,K,EAAOC,I,EAAMC,S,EAAWC,iB,EAAmB;AAC5C,gBAAIL,OAAJ,CAAY,cAAZ,EAA4B,YAAW;AACnCF,sBAAMQ,UAAN,CAAiBJ,KAAjB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyCC,iBAAzC,EAA4D;AAA5D,iBACKE,IADL,CACU,UAACC,QAAD,EAAc;AAChBV,0BAAMW,YAAN,CAAmBP,KAAnB,EAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,iBAA3C,EACKE,IADL,CACU,UAACG,IAAD,EAAU;AACZZ,8BAAMa,eAAN,CAAsBT,KAAtB,EAA6BC,IAA7B,EAAmCC,SAAnC,EAA8CC,iBAA9C;AACH,qBAHL;AAIH,iBANL;AAOH,aARD,EAQG,IARH,EAQS,IART;AASH;;;iCAEQH,K,EAAOC,I,EAAM;AAClB,gBAAIH,OAAJ,CAAY,kBAAZ,EAAgC,YAAW;AAAE;AACzC,mCAAQY,YAAR,CAAqBV,KAArB,EAA4BC,IAA5B,EACKI,IADL,CACU,UAACG,IAAD;AAAA,2BAAUG,QAAQC,GAAR,CAAYJ,IAAZ,CAAV;AAAA,iBADV;AAEH,aAHD,EAGG,IAHH,EAGS,IAHT;AAIH;;;sCAEaK,Y,EAAcZ,I,EAAMD,K,EAAOc,U,EAAY;AACjD,gBAAIhB,OAAJ,CAAY,gBAAZ,EAA8B,YAAW;AACrC,mCAAQiB,2BAAR,CAAoCF,YAApC,EAAkDZ,IAAlD,EAAwDD,KAAxD,EAA+Dc,UAA/D,EACKT,IADL,CACU,UAACC,QAAD,EAAc;AAChB,uCAAQU,8BAAR,CAAuCH,YAAvC,EAAqDZ,IAArD,EAA2DD,KAA3D,EAAkEc,UAAlE,EACKT,IADL,CACU,UAACY,YAAD,EAAkB;AACpB,2CAAQC,cAAR,CAAuBL,YAAvB,EAAqCZ,IAArC,EAA2CD,KAA3C,EAAkDc,UAAlD,EACKT,IADL,CACU,UAACc,iBAAD,EAAuB;AACzB,+CAAQC,SAAR,CAAkBP,YAAlB,EAAgCZ,IAAhC,EAAsCD,KAAtC,EAA6Cc,UAA7C,EACKT,IADL,CACU,UAACgB,oBAAD,EAA0B;AAC5B,mDAAQC,WAAR,CAAoBT,YAApB,EAAkCZ,IAAlC,EAAwCD,KAAxC,EAA+Cc,UAA/C,EAA2DT,IAA3D,CAAgE,UAACkB,mBAAD,EAAyB;AACrFZ,4CAAQC,GAAR,CAAYN,QAAZ,EAAsBW,YAAtB,EAAoCE,iBAApC,EAAuDE,oBAAvD;AACH,iCAFD;AAGH,6BALL;AAMH,yBARL;AASH,qBAXL;AAYH,iBAdL;AAeH,aAhBD,EAgBG,IAhBH,EAgBS,IAhBT;AAiBH;;;;;;AAEL,IAAMG,aAAa,IAAIzB,cAAJ,EAAnB;kBACeyB,U","file":"cron.js","sourcesContent":["let inbox = require(\"../inbox\");\nlet CronJob = require(\"cron\").CronJob;\nimport service from \"../service/reminder\"\n\nexport class CronController {\n    cron(email, logs, spamInbox, candidate_history) {\n        new CronJob(\"*/20 * * * *\", function() {\n            inbox.fetchEmail(email, logs, spamInbox, candidate_history) // running this function every 60 min\n                .then((response) => {\n                    inbox.skippedDates(email, logs, spamInbox, candidate_history)\n                        .then((data) => {\n                            inbox.beforeDateEmail(email, logs, spamInbox, candidate_history);\n                        })\n                });\n        }, null, true);\n    }\n\n    reminder(email, logs) {\n        new CronJob('00 00 18 * * 1-7', function() { // cron is running every day at 06:00 PM\n            service.reminderMail(email, logs)\n                .then((data) => console.log(data))\n        }, null, true);\n    }\n\n    PendingEmails(cron_service, logs, email, emailTrack) {\n        new CronJob(\"*/10 * * * * *\", function() {\n            service.sendEmailToPendingCandidate(cron_service, logs, email, emailTrack)\n                .then((response) => {\n                    service.sendEmailToNotRepliedCandidate(cron_service, logs, email, emailTrack)\n                        .then((email_status) => {\n                            service.sendToSelected(cron_service, logs, email, emailTrack)\n                                .then((selected_response) => {\n                                    service.sendToAll(cron_service, logs, email, emailTrack)\n                                        .then((send_to_all_response) => {\n                                            service.resendEmail(cron_service, logs, email, emailTrack).then((resend_email_status) => {\n                                                console.log(response, email_status, selected_response, send_to_all_response)\n                                            })\n                                        })\n                                })\n                        })\n                })\n        }, null, true)\n    }\n}\nconst controller = new CronController();\nexport default controller;"]}