{"version":3,"sources":["../../src/service/sendSlackNotification.js"],"names":["IncomingWebhook","require","slackNotification","data","user_email","Promise","resolve","reject","Slack","findOne","where","status","then","slackInfo","id","url","token","slackToken","webhook","userIcon","response","send","err","header","statusCode","body","email","callback","error","JSON","parse","entry","gphoto$thumbnail","$t","e"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAHA,IAAIA,kBAAkBC,QAAQ,eAAR,EAAyBD,eAA/C;;;AAKA,IAAME,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,UAAP,EAAsB;AAC5C,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,qBAAGC,KAAH,CAASC,OAAT,CAAiB,EAAEC,OAAO,EAAEC,QAAQ,IAAV,EAAT,EAAjB,EAA8CC,IAA9C,CAAmD,UAACC,SAAD,EAAe;AAC9D,gBAAIA,UAAUC,EAAd,EAAkB;AACd,oBAAIC,MAAMF,UAAUG,KAAV,IAAmB,iBAAOC,UAApC;AACA,oBAAIC,UAAU,IAAIlB,eAAJ,CAAoBe,GAApB,CAAd;AACAI,yBAASf,UAAT,EAAqB,UAASgB,QAAT,EAAmB;AACpCjB,4BAAQ,iBAAiBiB,QAAzB;AACAF,4BAAQG,IAAR,CAAalB,IAAb,EAAmB,UAASmB,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,IAAlC,EAAwC;AACvD,4BAAIH,GAAJ,EAAS;AACLf,mCAAOe,GAAP;AACH,yBAFD,MAEO;AACHhB,oCAAQkB,UAAR;AACH;AACJ,qBAND;AAOH,iBATD;AAUH,aAbD,MAaO;AACHlB,wBAAQ,sBAAR;AACH;;AAED,qBAASa,QAAT,CAAkBO,KAAlB,EAAyBC,QAAzB,EAAmC;AAC/B,4FAA2DD,KAA3D,gBAA6E,UAASE,KAAT,EAAgBR,QAAhB,EAA0BK,IAA1B,EAAgC;AACzG,wBAAI,CAACG,KAAL,EAAY;AACR,4BAAI;AACJD,qCAASE,KAAKC,KAAL,CAAWL,IAAX,EAAiBM,KAAjB,CAAuBC,gBAAvB,CAAwCC,EAAjD;AACC,yBAFD,CAGA,OAAMC,CAAN,EAAS;AACLP,qCAAS,uBAAT;AACH;AACJ;AACJ,iBATD;AAUH;AACJ,SA9BD;AAgCH,KAjCM,CAAP;AAkCH,CAnCD;;kBAqCe;AACXzB;AADW,C","file":"sendSlackNotification.js","sourcesContent":["let IncomingWebhook = require('@slack/client').IncomingWebhook;\nimport db from \"../db.js\";\nimport config from \"../config\";\nimport request from \"request\";\n\nconst slackNotification = (data, user_email) => {\n    return new Promise((resolve, reject) => {\n        db.Slack.findOne({ where: { status: true } }).then((slackInfo) => {\n            if (slackInfo.id) {\n                let url = slackInfo.token || config.slackToken;\n                let webhook = new IncomingWebhook(url);\n                userIcon(user_email, function(response) {\n                    data += \"\\n picture: \" + response;\n                    webhook.send(data, function(err, header, statusCode, body) {\n                        if (err) {\n                            reject(err)\n                        } else {\n                            resolve(statusCode)\n                        }\n                    });\n                })\n            } else {\n                resolve(\"No slack information\")\n            }\n\n            function userIcon(email, callback) {\n                request(`http://picasaweb.google.com/data/entry/api/user/${email}?alt=json`, function(error, response, body) {\n                    if (!error) {\n                        try {\n                        callback(JSON.parse(body).entry.gphoto$thumbnail.$t)    \n                        }\n                        catch(e) {\n                            callback(\"Invalid Email Address\")\n                        }\n                    }\n                });\n            }\n        })\n\n    })\n}\n\nexport default {\n    slackNotification\n}"]}