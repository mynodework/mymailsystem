{"version":3,"sources":["../../src/service/exams.js"],"names":["module","exports","saveQuestion","examQuestions","body","Promise","resolve","reject","Tag","findOne","where","id","job_profile","is_job_profile_tag","then","jobProfile","count","exam_subject","countQues","addQuesLimit","question","resp","create","result","status","message","data","err","getAllQuestions","admin","questions","total_length","examSubject","findAll","examGroups","findQuestionByGroup","final_response","callback","group","splice","randomQuestions","find","$in","length","sampleSize","RandomQuesLimit","push","group_name","updateQuestion","questionID","update","_id","mesage","get_one_question","deleteQuestion","remove","exam_result","email","candidateResult","parseInt","correct_answers","map","answers","val","key","filter","index","Q_id","answer","ans_id","exam_score","fb_id","candidateUpdateResult","response","user","slack_message","submit_exam_message","fb_url","sender_mail","candidate_url","slackNotification","slack_response","$set","examScore","exam_date","Date","multi","showExamResult","params","search_type","RegExp","user_email","name","$lt","end_date","$gte","start_date","uniqBy","verifyOTP","examCandidate","examToken","getJobProfile","tag_data","tag_id","findTag","tag","job_profile_data","candidate_exam_result","finalResult","candidateQuestions","questionIds","candidateAnswers","check","get","candidate_answer_data","options","description","candidate_result","totalQuestions","attempted_questions","wrong_answers","taken_time_minutes","approve_candidate","findOneAndUpdate","candidate_status","toString"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB;AACbC,kBAAc,sBAASC,aAAT,EAAwBC,IAAxB,EAA8B;AACxC,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,yBAAGC,GAAH,CAAOC,OAAP,CAAe,EAAEC,OAAO,EAAEC,IAAIP,KAAKQ,WAAX,EAAwBC,oBAAoB,CAA5C,EAAT,EAAf,EAA2EC,IAA3E,CAAgF,UAACC,UAAD,EAAgB;AAC5F,oBAAIA,UAAJ,EAAgB;AACZZ,kCAAca,KAAd,CAAoB,EAAEC,cAAcb,KAAKa,YAArB,EAApB,EAAyDH,IAAzD,CAA8D,UAACI,SAAD,EAAe;AACzE,4BAAIA,YAAY,0BAAWC,YAA3B,EAAyC;AACrChB,0CAAcM,OAAd,CAAsB,EAAEW,UAAUhB,KAAKgB,QAAjB,EAAtB,EAAmDN,IAAnD,CAAwD,UAACO,IAAD,EAAU;AAC9D,oCAAI,CAACA,IAAL,EAAW;AACPlB,kDAAcmB,MAAd,CAAqBlB,IAArB,EAA2BU,IAA3B,CAAgC,UAACS,MAAD,EAAY;AACxCjB,gDAAQ,EAAEkB,QAAQ,CAAV,EAAaC,SAAS,gBAAtB,EAAwCC,MAAMH,MAA9C,EAAR;AACH,qCAFD,EAEG,UAACI,GAAD,EAAS;AAAEpB,+CAAOoB,GAAP;AAAa,qCAF3B;AAGH,iCAJD,MAIO;AACHpB,2CAAO,wBAAP;AACH;AACJ,6BARD,EAQG,UAACoB,GAAD,EAAS;AAAEpB,uCAAOoB,GAAP;AAAa,6BAR3B;AASH,yBAVD,MAUO;AACHpB,8DAAgC,0BAAWY,YAA3C;AACH;AACJ,qBAdD;AAeH,iBAhBD,MAgBO;AACHZ,2BAAO,uBAAP;AACH;AACJ,aApBD;AAqBH,SAtBM,CAAP;AAuBH,KAzBY;AA0BbqB,qBAAiB,yBAASzB,aAAT,EAAwBS,WAAxB,EAAqCiB,KAArC,EAA4C;AACzD,eAAO,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIuB,YAAY,EAAhB;AACA,gBAAIC,eAAe,CAAnB;AACA,yBAAGC,WAAH,CAAeC,OAAf,GAAyBnB,IAAzB,CAA8B,UAACoB,UAAD,EAAgB;AAC1CC,oCAAoBD,UAApB,EAAgC,UAASE,cAAT,EAAyB;AACrD9B,4BAAQ,EAAEkB,QAAQ,CAAV,EAAaE,MAAMU,cAAnB,EAAmCpB,OAAOe,YAA1C,EAAR;AACH,iBAFD;;AAIA,yBAASI,mBAAT,CAA6BD,UAA7B,EAAyCG,QAAzC,EAAmD;AAC/C,wBAAIC,QAAQJ,WAAWK,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAZ;AACA,wBAAIC,kBAAkB,EAAtB;AACArC,kCAAcsC,IAAd,CAAmB,EAAE7B,aAAa,EAAE8B,KAAK,CAAC9B,WAAD,CAAP,EAAf,EAAuCK,cAAcqB,MAAM3B,EAA3D,EAAnB,EAAoF,EAAE,OAAO,CAAT,EAAY,YAAY,CAAxB,EAA2B,WAAW,CAAtC,EAAyC,eAAe,CAAxD,EAApF,EAAiJG,IAAjJ,CAAsJ,UAACO,IAAD,EAAU;AAC5J,4BAAIA,KAAKsB,MAAT,EAAiB;AACb,gCAAI,CAACd,KAAL,EAAY;AACRW,kDAAkB,iBAAEI,UAAF,CAAavB,IAAb,EAAmB,0BAAWwB,eAA9B,CAAlB;AACAd,gDAAgBS,gBAAgBG,MAAhC;AACH,6BAHD,MAGO;AACHZ,gDAAgBV,KAAKsB,MAArB;AACH;AACDb,sCAAUgB,IAAV,CAAe,EAAEC,YAAYT,MAAMrB,YAApB,EAAkCa,WAAWU,gBAAgBG,MAAhB,GAAyBH,eAAzB,GAA2CnB,IAAxF,EAAf;AACH;AACD,4BAAIa,WAAWS,MAAf,EAAuB;AACnBR,gDAAoBD,UAApB,EAAgCG,QAAhC;AACH,yBAFD,MAEO;AACHA,qCAASP,SAAT;AACH;AACJ,qBAfD,EAeG,UAACH,GAAD,EAAS;AAAEpB,+BAAOoB,GAAP;AAAa,qBAf3B;AAgBH;AACJ,aAzBD;AA0BH,SA7BM,CAAP;AA8BH,KAzDY;AA0DbqB,oBAAgB,wBAAS7C,aAAT,EAAwBC,IAAxB,EAA8B6C,UAA9B,EAA0C;AACtD,eAAO,IAAI5C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,0BAAc+C,MAAd,CAAqB,EAAEC,KAAKF,UAAP,EAArB,EAA0C7C,IAA1C,EAAgDU,IAAhD,CAAqD,UAACO,IAAD,EAAU;AAC3D,oBAAIA,IAAJ,EAAU;AACNf,4BAAQ,EAAEkB,QAAQ,CAAV,EAAa4B,QAAQ,kBAArB,EAAyC1B,MAAML,IAA/C,EAAR;AACH,iBAFD,MAEO;AACHd,2BAAO,oBAAP;AACH;AACJ,aAND,EAMG,UAACoB,GAAD,EAAS;AAAEpB,uBAAOoB,GAAP;AAAa,aAN3B;AAOH,SARM,CAAP;AASH,KApEY;AAqEb0B,sBAAkB,0BAASlD,aAAT,EAAwB8C,UAAxB,EAAoC;AAClD,eAAO,IAAI5C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,0BAAcM,OAAd,CAAsB,EAAE0C,KAAKF,UAAP,EAAtB,EAA2CnC,IAA3C,CAAgD,UAACO,IAAD,EAAU;AACtD,oBAAIA,IAAJ,EAAU;AACNf,4BAAQ,EAAEkB,QAAQ,CAAV,EAAaE,MAAML,IAAnB,EAAR;AACH,iBAFD,MAEO;AACHd,2BAAO,oBAAP;AACH;AACJ,aAND,EAMG,UAACoB,GAAD,EAAS;AAAEpB,uBAAOoB,GAAP;AAAa,aAN3B;AAOH,SARM,CAAP;AASH,KA/EY;;AAiFb2B,oBAAgB,wBAASnD,aAAT,EAAwB8C,UAAxB,EAAoC;AAChD,eAAO,IAAI5C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,0BAAcoD,MAAd,CAAqB,EAAEJ,KAAKF,UAAP,EAArB,EAA0CnC,IAA1C,CAA+C,UAACO,IAAD,EAAU;AACrD,oBAAIA,IAAJ,EAAU;AACNf,4BAAQ,EAAEkB,QAAQ,CAAV,EAAaC,SAAS,kBAAtB,EAAR;AACH,iBAFD,MAEO;AACHlB,2BAAO,oBAAP;AACH;AACJ,aAND,EAMG,UAACoB,GAAD,EAAS;AAAEpB,uBAAOoB,GAAP;AAAa,aAN3B;AAOH,SARM,CAAP;AASH,KA3FY;;AA6Fb6B,iBAAa,qBAASrD,aAAT,EAAwBsD,KAAxB,EAA+BC,eAA/B,EAAgDtD,IAAhD,EAAsD;AAC/D,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCH,iBAAKQ,WAAL,GAAmB+C,SAASvD,KAAKQ,WAAd,CAAnB;AACAT,0BAAcsC,IAAd,CAAmB,EAAE7B,aAAa,EAAE8B,KAAK,CAACtC,KAAKQ,WAAN,CAAP,EAAf,EAAnB,EAAiE,EAAE,OAAO,CAAT,EAAY,UAAU,CAAtB,EAAjE,EAA4FE,IAA5F,CAAiG,UAACS,MAAD,EAAY;AACzG,oBAAIqC,kBAAkB,CAAtB;AACA,iCAAEC,GAAF,CAAMzD,KAAK0D,OAAX,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9B,qCAAEC,MAAF,CAAS1C,MAAT,EAAiB,UAAS2C,KAAT,EAAgB;AAC7B,4BAAKA,MAAMf,GAAN,IAAaY,IAAII,IAAlB,IAA4BD,MAAME,MAAN,IAAgBL,IAAIM,MAApD,EAA6D;AACzDT;AACH;AACJ,qBAJD;AAKH,iBAND;AAOAxD,qBAAKkE,UAAL,GAAkBV,eAAlB;AACAF,gCAAgBjB,IAAhB,CAAqB,EAAE8B,OAAOnE,KAAKmE,KAAd,EAArB,EAA4CzD,IAA5C,CAAiD,UAACO,IAAD,EAAU;AACvDmD,0CAAsB,UAASC,QAAT,EAAmB;AACrChB,8BAAMhD,OAAN,CAAc,EAAE8D,OAAOnE,KAAKmE,KAAd,EAAd,EAAqCzD,IAArC,CAA0C,UAAC4D,IAAD,EAAU;AAChD,gCAAIC,gBAAgB,0BAAWC,mBAAX,GAAiC,IAAjC,GAAwC,0BAAWC,MAAnD,GAA4DzE,KAAKmE,KAAjE,GAAyE,IAAzE,GAAgF,SAAhF,GAA4FG,KAAKI,WAAjG,GAA+G,IAA/G,GAAsH,0BAAWC,aAAjI,GAAiJL,KAAKvB,GAA1K;AACA,4DAAM6B,iBAAN,CAAwBL,aAAxB,EAAuCD,KAAKI,WAA5C,EAAyDhE,IAAzD,CAA8D,UAACmE,cAAD,EAAoB;AAC9E,oCAAIA,kBAAkB,GAAtB,EAA2B;AACvB3E,4CAAQmE,QAAR;AACH;AACJ,6BAJD,EAIG,UAAC9C,GAAD,EAAS;AAAEpB,uCAAOoB,GAAP;AAAa,6BAJ3B;AAKH,yBAPD;AAQH,qBATD;;AAWA,6BAAS6C,qBAAT,CAA+BnC,QAA/B,EAAyC;AACrC,4BAAIhB,KAAKsB,MAAL,IAAe,CAAnB,EAAsB;AAClBe,4CAAgBR,MAAhB,CAAuB,EAAEqB,OAAOnE,KAAKmE,KAAd,EAAvB,EAA8CnE,IAA9C,EAAoDU,IAApD,CAAyD,UAACO,IAAD,EAAU;AAC/DoC,sCAAMP,MAAN,CAAa,EAAEqB,OAAOnE,KAAKmE,KAAd,EAAb,EAAoC,EAAEW,MAAM,EAAEC,WAAWvB,eAAb,EAA8BwB,WAAW,IAAIC,IAAJ,EAAzC,EAAR,EAApC,EAAqG,EAAEC,OAAO,IAAT,EAArG,EAAsHxE,IAAtH,CAA2H,UAACY,IAAD,EAAU;AACjI,wCAAIA,IAAJ,EAAU;AACNW,iDAAS,EAAEb,QAAQ,CAAV,EAAaC,SAAS,mBAAtB,EAAT;AACH,qCAFD,MAEO;AACHlB,+CAAO,wCAAP;AACH;AACJ,iCAND,EAMG,UAACoB,GAAD,EAAS;AAAEpB,2CAAOoB,GAAP;AAAa,iCAN3B;AAOH,6BARD,EAQG,UAACA,GAAD,EAAS;AAAEpB,uCAAOoB,GAAP;AAAa,6BAR3B;AASH,yBAVD,MAUO;AACH+B,4CAAgBpC,MAAhB,CAAuBlB,IAAvB,EAA6BU,IAA7B,CAAkC,UAAC2D,QAAD,EAAc;AAC5C,oCAAIA,QAAJ,EAAc;AACVhB,0CAAMP,MAAN,CAAa,EAAEqB,OAAOnE,KAAKmE,KAAd,EAAb,EAAoC,EAAEW,MAAM,EAAEC,WAAWvB,eAAb,EAA8BwB,WAAW,IAAIC,IAAJ,EAAzC,EAAR,EAApC,EAAqG,EAAEC,OAAO,IAAT,EAArG,EAAsHxE,IAAtH,CAA2H,UAACY,IAAD,EAAU;AACjI,4CAAIA,IAAJ,EAAU;AACNW,qDAAS,EAAEb,QAAQ,CAAV,EAAaC,SAAS,mBAAtB,EAAT;AACH,yCAFD,MAEO;AACHlB,mDAAO,wCAAP;AACH;AACJ,qCAND,EAMG,UAACoB,GAAD,EAAS;AAAEpB,+CAAOoB,GAAP;AAAa,qCAN3B;AAOH;AACJ,6BAVD,EAUG,UAACA,GAAD,EAAS;AAAEpB,uCAAOoB,GAAP;AAAa,6BAV3B;AAWH;AACJ;AACJ,iBArCD,EAqCG,UAACA,GAAD,EAAS;AAAEpB,2BAAOoB,GAAP;AAAa,iBArC3B;AAsCH,aAhDD;AAiDH,SAnDM,CAAP;AAoDH,KAlJY;;AAoJb4D,oBAAgB,wBAAS9B,KAAT,EAAgB+B,MAAhB,EAAwBpF,IAAxB,EAA8B;AAC1C,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIG,QAAQ,EAAZ;AACA,gBAAIN,KAAKqF,WAAL,IAAoB,OAAxB,EAAiC;AAC7B/E,wBAAQ,EAAE,eAAe,EAAE,UAAU,IAAIgF,MAAJ,CAAWtF,KAAKuF,UAAhB,EAA4B,GAA5B,CAAZ,EAAjB,EAAiE,aAAa,EAAE,WAAW,IAAb,EAA9E,EAAR;AACH,aAFD,MAEO,IAAIvF,KAAKqF,WAAL,IAAoB,MAAxB,EAAgC;AACnC/E,wBAAQ,EAAE,QAAQ,EAAE,UAAU,IAAIgF,MAAJ,CAAWtF,KAAKwF,IAAhB,EAAsB,GAAtB,CAAZ,EAAV,EAAoD,aAAa,EAAE,WAAW,IAAb,EAAjE,EAAR;AACH,aAFM,MAEA,IAAIxF,KAAKqF,WAAL,IAAoB,MAAxB,EAAgC;AACnC/E,wBAAQ,EAAE,aAAa,EAAEmF,KAAKzF,KAAK0F,QAAZ,EAAsBC,MAAM3F,KAAK4F,UAAjC,EAAf,EAA8D,aAAa,EAAE,WAAW,IAAb,EAA3E,EAAR;AACH,aAFM,MAEA;AACHtF,wBAAQ,EAAE,aAAa,EAAE,WAAW,IAAb,EAAf,EAAR;AACH;AACD+C,kBAAMhB,IAAN,CAAW/B,KAAX,EAAkB,EAAE,QAAQ,CAAV,EAAa,eAAe,CAA5B,EAA+B,aAAa,CAA5C,EAA+C,aAAa,CAA5D,EAA+D,SAAS,CAAxE,EAAlB,EAA+FI,IAA/F,CAAoG,UAACY,IAAD,EAAU;AAC1GpB,wBAAQ,iBAAE2F,MAAF,CAASvE,IAAT,EAAe,aAAf,CAAR;AACH,aAFD,EAEG,UAACC,GAAD,EAAS;AAAEpB,uBAAOoB,GAAP;AAAa,aAF3B;AAGH,SAdM,CAAP;AAeH,KApKY;;AAsKbuE,eAAW,mBAAS9F,IAAT,EAAe;AACtB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,yBAAG4F,aAAH,CAAiB1F,OAAjB,CAAyB,EAAEC,OAAO,EAAE6D,OAAOnE,KAAKmE,KAAd,EAAqB6B,WAAWhG,KAAKgG,SAArC,EAAT,EAAzB,EAAsFtF,IAAtF,CAA2F,UAACY,IAAD,EAAU;AACjG,oBAAIA,IAAJ,EAAU;AACNpB,4BAAQ,EAAEkB,QAAQ,CAAV,EAAaE,MAAMA,IAAnB,EAAR;AACH,iBAFD,MAEO;AACHnB,2BAAO,EAAEkB,SAAS,aAAX,EAAP;AACH;AACJ,aAND,EAMG,UAACE,GAAD,EAAS;AAAEpB,uBAAOoB,GAAP;AAAa,aAN3B;AAOH,SARM,CAAP;AASH,KAhLY;;AAkLb0E,mBAAe,uBAACC,QAAD,EAAc;AACzB,eAAO,IAAIjG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAI6B,iBAAiB,EAArB;AACA,gBAAIkE,SAASC,MAAT,CAAgB5D,MAApB,EAA4B;AACxB6D,wBAAQF,QAAR,EAAkB,UAAS7B,QAAT,EAAmB;AACjCnE,4BAAQmE,QAAR;AACH,iBAFD;AAGH,aAJD,MAIO;AACHnE,wBAAQ,EAAEkB,QAAQ,CAAV,EAAaC,SAAS,oCAAtB,EAAR;AACH;;AAED,qBAAS+E,OAAT,CAAiBC,GAAjB,EAAsBpE,QAAtB,EAAgC;AAC5B,oBAAIzB,cAAc6F,IAAIF,MAAJ,CAAWhE,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAlB;AACA,6BAAG/B,GAAH,CAAOC,OAAP,CAAe,EAAEC,OAAO,EAAEC,IAAIgD,SAAS/C,WAAT,CAAN,EAAT,EAAf,EAAyDE,IAAzD,CAA8D,UAAC4F,gBAAD,EAAsB;AAChFtE,mCAAeU,IAAf,CAAoB4D,gBAApB;AACA,wBAAID,IAAIF,MAAJ,CAAW5D,MAAf,EAAuB;AACnB6D,gCAAQC,GAAR,EAAapE,QAAb;AACH,qBAFD,MAEO;AACHA,iCAASD,cAAT;AACH;AACJ,iBAPD;AAQH;AACJ,SArBM,CAAP;AAsBH,KAzMY;;AA2MbuE,2BAAuB,+BAASxG,aAAT,EAAwBuD,eAAxB,EAAyCtD,IAAzC,EAA+C;AAClE,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIqG,cAAc,EAAlB;AACAzG,0BAAcsC,IAAd,CAAmB,EAAnB,EAAuB,EAAE,OAAO,CAAT,EAAY,UAAU,CAAtB,EAAyB,WAAW,CAApC,EAAuC,YAAY,CAAnD,EAAsD,eAAe,CAArE,EAAvB,EAAiG3B,IAAjG,CAAsG,UAACgB,SAAD,EAAe;AACjH4B,gCAAgBjD,OAAhB,CAAwB,EAAE8D,OAAOnE,KAAKmE,KAAd,EAAxB,EAA+CzD,IAA/C,CAAoD,UAACY,IAAD,EAAU;AAC1D,wBAAIA,IAAJ,EAAU;AACN,4BAAImF,qBAAqB,EAAzB;AACA,yCAAEhD,GAAF,CAAMnC,KAAKoF,WAAX,EAAwB,UAAC/C,GAAD,EAAMC,GAAN,EAAc;AAClC,6CAAEC,MAAF,CAASnC,SAAT,EAAoB,UAASoC,KAAT,EAAgB;AAChC,oCAAIA,MAAMf,GAAN,IAAaY,GAAjB,EAAsB;AAClB8C,uDAAmB/D,IAAnB,CAAwBoB,KAAxB;AACH;AACJ,6BAJD;AAKH,yBAND;;AAQA,4BAAI6C,mBAAmB,EAAvB;AACA,yCAAElD,GAAF,CAAMgD,kBAAN,EAA0B,UAAC9C,GAAD,EAAMC,GAAN,EAAc;AACpC,gCAAIgD,QAAQ,iBAAEvE,IAAF,CAAOf,KAAKoC,OAAZ,EAAqB,UAASmD,GAAT,EAAc;AAAE,uCAAOA,IAAI9C,IAAJ,IAAYJ,IAAIZ,GAAvB;AAA6B,6BAAlE,CAAZ;AACA,gCAAI+D,wBAAwB;AACxB/D,qCAAKY,IAAIZ,GADe;AAExB/B,0CAAU2C,IAAI3C,QAFU;AAGxBgD,wCAAQL,IAAIK,MAHY;AAIxB+C,yCAASpD,IAAIoD,OAJW;AAKxBC,6CAAarD,IAAIqD;AALO,6BAA5B;AAOA,gCAAIJ,KAAJ,EAAW;AACPE,sDAAsB,kBAAtB,IAA4CF,MAAM3C,MAAlD;AACA0C,iDAAiBjE,IAAjB,CAAsBoE,qBAAtB;AACH,6BAHD,MAGO;AACHA,sDAAsB,kBAAtB,IAA4C,IAA5C;AACAH,iDAAiBjE,IAAjB,CAAsBoE,qBAAtB;AACH;AACD,gCAAIlD,OAAO6C,mBAAmBlE,MAAnB,GAA4B,CAAvC,EAA0C;AACtC,oCAAI0E,mBAAmB;AACnBvF,+CAAWiF,gBADQ;AAEnBO,oDAAgB5F,KAAKoF,WAAL,CAAiBnE,MAFd;AAGnB4E,yDAAqB7F,KAAKoC,OAAL,CAAanB,MAHf;AAInB2B,gDAAY5C,KAAK4C,UAJE;AAKnBkD,mDAAe9F,KAAKoC,OAAL,CAAanB,MAAb,GAAsBjB,KAAK4C,UALvB;AAMnBmD,wDAAoB/F,KAAK+F;AANN,iCAAvB;AAQAnH,wCAAQ,EAAEkB,QAAQ,CAAV,EAAaE,MAAM2F,gBAAnB,EAAR;AACH;AACJ,yBA3BD;AA4BH,qBAvCD,MAuCO;AACH9G,+BAAO,kBAAP;AACH;AACJ,iBA3CD;AA4CH,aA7CD;AA8CH,SAhDM,CAAP;AAiDH,KA7PY;AA8PbmH,uBAAmB,2BAASjE,KAAT,EAAgBrD,IAAhB,EAAsB;AACrC,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCkD,kBAAMkE,gBAAN,CAAuB,EAAE7C,aAAa1E,KAAKqD,KAApB,EAAvB,EAAoD,EAAEyB,MAAM,EAAE0C,kBAAkB,IAApB,EAA0BrB,QAAQ,CAACnG,KAAKmG,MAAL,CAAYsB,QAAZ,EAAD,CAAlC,EAAR,EAApD,EAA4H/G,IAA5H,CAAiI,UAACY,IAAD,EAAU;AACvIpB,wBAAQ,EAAEkB,QAAQ,CAAV,EAAaC,SAAS,UAAtB,EAAR;AACH,aAFD,EAEG,UAACE,GAAD,EAAS;AAAEpB,uBAAOoB,GAAP;AAAa,aAF3B;AAGH,SAJM,CAAP;AAKH;;AApQY,CAAjB","file":"exams.js","sourcesContent":["import _ from \"lodash\";\nimport db from \"../db\";\nimport constant from \"../models/constant\";\nimport slack from '../service/sendSlackNotification';\n\nmodule.exports = {\n    saveQuestion: function(examQuestions, body) {\n        return new Promise((resolve, reject) => {\n            db.Tag.findOne({ where: { id: body.job_profile, is_job_profile_tag: 1 } }).then((jobProfile) => {\n                if (jobProfile) {\n                    examQuestions.count({ exam_subject: body.exam_subject }).then((countQues) => {\n                        if (countQues < constant().addQuesLimit) {\n                            examQuestions.findOne({ question: body.question }).then((resp) => {\n                                if (!resp) {\n                                    examQuestions.create(body).then((result) => {\n                                        resolve({ status: 1, message: \"question added\", data: result });\n                                    }, (err) => { reject(err) })\n                                } else {\n                                    reject(\"question already exist\")\n                                }\n                            }, (err) => { reject(err) })\n                        } else {\n                            reject(`can not add more than ${constant().addQuesLimit} questions in this group`)\n                        }\n                    })\n                } else {\n                    reject(\"job profile not exist\")\n                }\n            })\n        })\n    },\n    getAllQuestions: function(examQuestions, job_profile, admin) {\n        return new Promise((resolve, reject) => {\n            let questions = [];\n            let total_length = 0;\n            db.examSubject.findAll().then((examGroups) => {\n                findQuestionByGroup(examGroups, function(final_response) {\n                    resolve({ status: 1, data: final_response, count: total_length })\n                })\n\n                function findQuestionByGroup(examGroups, callback) {\n                    let group = examGroups.splice(0, 1)[0];\n                    let randomQuestions = []\n                    examQuestions.find({ job_profile: { $in: [job_profile] }, exam_subject: group.id }, { \"_id\": 1, \"question\": 1, \"options\": 1, \"description\": 1 }).then((resp) => {\n                        if (resp.length) {\n                            if (!admin) {\n                                randomQuestions = _.sampleSize(resp, constant().RandomQuesLimit);\n                                total_length += randomQuestions.length\n                            } else {\n                                total_length += resp.length\n                            }\n                            questions.push({ group_name: group.exam_subject, questions: randomQuestions.length ? randomQuestions : resp })\n                        }\n                        if (examGroups.length) {\n                            findQuestionByGroup(examGroups, callback)\n                        } else {\n                            callback(questions)\n                        }\n                    }, (err) => { reject(err) })\n                }\n            })\n        })\n    },\n    updateQuestion: function(examQuestions, body, questionID) {\n        return new Promise((resolve, reject) => {\n            examQuestions.update({ _id: questionID }, body).then((resp) => {\n                if (resp) {\n                    resolve({ status: 1, mesage: \"question updated\", data: resp })\n                } else {\n                    reject(\"question not found\")\n                }\n            }, (err) => { reject(err) })\n        })\n    },\n    get_one_question: function(examQuestions, questionID) {\n        return new Promise((resolve, reject) => {\n            examQuestions.findOne({ _id: questionID }).then((resp) => {\n                if (resp) {\n                    resolve({ status: 1, data: resp })\n                } else {\n                    reject(\"question not found\")\n                }\n            }, (err) => { reject(err) })\n        })\n    },\n\n    deleteQuestion: function(examQuestions, questionID) {\n        return new Promise((resolve, reject) => {\n            examQuestions.remove({ _id: questionID }).then((resp) => {\n                if (resp) {\n                    resolve({ status: 1, message: \"question deleted\" })\n                } else {\n                    reject(\"question not found\")\n                }\n            }, (err) => { reject(err) })\n        })\n    },\n\n    exam_result: function(examQuestions, email, candidateResult, body) {\n        return new Promise((resolve, reject) => {\n            body.job_profile = parseInt(body.job_profile)\n            examQuestions.find({ job_profile: { $in: [body.job_profile] } }, { \"_id\": 1, \"answer\": 1 }).then((result) => {\n                let correct_answers = 0;\n                _.map(body.answers, (val, key) => {\n                    _.filter(result, function(index) {\n                        if ((index._id == val.Q_id) && (index.answer == val.ans_id)) {\n                            correct_answers++;\n                        }\n                    });\n                });\n                body.exam_score = correct_answers;\n                candidateResult.find({ fb_id: body.fb_id }).then((resp) => {\n                    candidateUpdateResult(function(response) {\n                        email.findOne({ fb_id: body.fb_id }).then((user) => {\n                            let slack_message = constant().submit_exam_message + \"\\n\" + constant().fb_url + body.fb_id + \"\\n\" + \"Email: \" + user.sender_mail + \"\\n\" + constant().candidate_url + user._id;\n                            slack.slackNotification(slack_message, user.sender_mail).then((slack_response) => {\n                                if (slack_response == 200) {\n                                    resolve(response)\n                                }\n                            }, (err) => { reject(err) })\n                        })\n                    })\n\n                    function candidateUpdateResult(callback) {\n                        if (resp.length != 0) {\n                            candidateResult.update({ fb_id: body.fb_id }, body).then((resp) => {\n                                email.update({ fb_id: body.fb_id }, { $set: { examScore: correct_answers, exam_date: new Date() } }, { multi: true }).then((data) => {\n                                    if (data) {\n                                        callback({ status: 1, message: \"answers submitted\" })\n                                    } else {\n                                        reject(\"user not exist or something went wrong\")\n                                    }\n                                }, (err) => { reject(err) })\n                            }, (err) => { reject(err) })\n                        } else {\n                            candidateResult.create(body).then((response) => {\n                                if (response) {\n                                    email.update({ fb_id: body.fb_id }, { $set: { examScore: correct_answers, exam_date: new Date() } }, { multi: true }).then((data) => {\n                                        if (data) {\n                                            callback({ status: 1, message: \"answers submitted\" })\n                                        } else {\n                                            reject(\"user not exist or something went wrong\")\n                                        }\n                                    }, (err) => { reject(err) })\n                                }\n                            }, (err) => { reject(err) })\n                        }\n                    }\n                }, (err) => { reject(err) })\n            })\n        })\n    },\n\n    showExamResult: function(email, params, body) {\n        return new Promise((resolve, reject) => {\n            let where = '';\n            if (body.search_type == \"email\") {\n                where = { 'sender_mail': { '$regex': new RegExp(body.user_email, 'i') }, \"examScore\": { \"$exists\": true } }\n            } else if (body.search_type == \"name\") {\n                where = { 'from': { '$regex': new RegExp(body.name, 'i') }, \"examScore\": { \"$exists\": true } }\n            } else if (body.search_type == \"date\") {\n                where = { 'exam_date': { $lt: body.end_date, $gte: body.start_date }, \"examScore\": { \"$exists\": true } }\n            } else {\n                where = { \"examScore\": { \"$exists\": true } }\n            }\n            email.find(where, { \"from\": 1, \"sender_mail\": 1, \"examScore\": 1, \"exam_date\": 1, \"fb_id\": 1 }).then((data) => {\n                resolve(_.uniqBy(data, 'sender_mail'))\n            }, (err) => { reject(err) })\n        })\n    },\n\n    verifyOTP: function(body) {\n        return new Promise((resolve, reject) => {\n            db.examCandidate.findOne({ where: { fb_id: body.fb_id, examToken: body.examToken } }).then((data) => {\n                if (data) {\n                    resolve({ status: 1, data: data })\n                } else {\n                    reject({ message: \"Invalid OTP\" })\n                }\n            }, (err) => { reject(err) })\n        })\n    },\n\n    getJobProfile: (tag_data) => {\n        return new Promise((resolve, reject) => {\n            let final_response = [];\n            if (tag_data.tag_id.length) {\n                findTag(tag_data, function(response) {\n                    resolve(response)\n                })\n            } else {\n                resolve({ status: 0, message: \"No tag is Assigned Contact with Hr\" })\n            }\n\n            function findTag(tag, callback) {\n                let job_profile = tag.tag_id.splice(0, 1)[0];\n                db.Tag.findOne({ where: { id: parseInt(job_profile) } }).then((job_profile_data) => {\n                    final_response.push(job_profile_data)\n                    if (tag.tag_id.length) {\n                        findTag(tag, callback)\n                    } else {\n                        callback(final_response)\n                    }\n                })\n            }\n        });\n    },\n\n    candidate_exam_result: function(examQuestions, candidateResult, body) {\n        return new Promise((resolve, reject) => {\n            let finalResult = []\n            examQuestions.find({}, { \"_id\": 1, \"answer\": 1, \"options\": 1, \"question\": 1, \"description\": 1 }).then((questions) => {\n                candidateResult.findOne({ fb_id: body.fb_id }).then((data) => {\n                    if (data) {\n                        let candidateQuestions = []\n                        _.map(data.questionIds, (val, key) => {\n                            _.filter(questions, function(index) {\n                                if (index._id == val) {\n                                    candidateQuestions.push(index);\n                                }\n                            });\n                        });\n\n                        let candidateAnswers = []\n                        _.map(candidateQuestions, (val, key) => {\n                            let check = _.find(data.answers, function(get) { return get.Q_id == val._id; });\n                            let candidate_answer_data = {\n                                _id: val._id,\n                                question: val.question,\n                                answer: val.answer,\n                                options: val.options,\n                                description: val.description\n                            }\n                            if (check) {\n                                candidate_answer_data['candidate_answer'] = check.ans_id;\n                                candidateAnswers.push(candidate_answer_data)\n                            } else {\n                                candidate_answer_data['candidate_answer'] = null;\n                                candidateAnswers.push(candidate_answer_data)\n                            }\n                            if (key == candidateQuestions.length - 1) {\n                                var candidate_result = {\n                                    questions: candidateAnswers,\n                                    totalQuestions: data.questionIds.length,\n                                    attempted_questions: data.answers.length,\n                                    exam_score: data.exam_score,\n                                    wrong_answers: data.answers.length - data.exam_score,\n                                    taken_time_minutes: data.taken_time_minutes\n                                };\n                                resolve({ status: 1, data: candidate_result })\n                            }\n                        });\n                    } else {\n                        reject(\"result not found\")\n                    }\n                })\n            })\n        })\n    },\n    approve_candidate: function(email, body) {\n        return new Promise((resolve, reject) => {\n            email.findOneAndUpdate({ sender_mail: body.email }, { $set: { candidate_status: true, tag_id: [body.tag_id.toString()] } }).then((data) => {\n                resolve({ status: 1, message: \"approved\" })\n            }, (err) => { reject(err) })\n        })\n    }\n\n}"]}