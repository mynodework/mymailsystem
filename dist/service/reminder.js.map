{"version":3,"sources":["../../src/service/reminder.js"],"names":["reminderMail","email","logs","resolve","reject","dateTime","Date","start","format","end","add","id_list","find","shedule_date","exec","err","response","length","sendReminder","reminder_status","update","reminder_send","multi","update_response","mail_data","callback","user_info","splice","push","_id","Template","findById","parseInt","send_template","then","template_data","filter","body","from","tag_id","shedule_time","replaced_data","Smtp","findOne","where","status","smtp","subject","reminder","sendScheduledMail","sender_mail","mail_response","Tag","job_profile","slack_message","slack_reminder","title","shedule_for","candidate_url","slackNotification","slack_response","console","log","emailLog","mail_log","message","sendEmailToPendingCandidate","cron_service","emailTrack","work","pending_work","cronWorkData","get","template","is_automatic_email_send","result","sendTemplateToEmails","data","$pull","candidate_list","updated_cronWork","emails","email_id","html","sendMail","text","log_response","send_template_count","template_id","id","reply_to_id","reply_to","data1","tracking_info","candidate_email","tracking_id","sent_time","create","info","email_track","res","findOneAndUpdate","$set","update_status","sendEmailToNotRepliedCandidate","not_replied","candidate_info","$inc","$push","campaign_name","sendToSelected","selectedCandidate","email_data","unread","sendToAll","resendEmail","candidate","smtp_data","sendEmailToNotViewed"],"mappings":"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","file":"reminder.js","sourcesContent":["import constant from '../models/constant'\nimport moment from 'moment'\nimport mail from '../modules/mail'\nimport replaceData from \"../modules/replaceVariable\";\nimport db from \"../db\";\nimport email_log from \"./emaillogs.js\";\nimport { Promise, reject } from 'bluebird';\nimport { resolve } from 'dns';\nimport EmailToNotViewed from './sendEmailToNotViewed';\nimport slack from '../service/sendSlackNotification';\n\nlet reminderMail = (email, logs) => {\n    return new Promise((resolve, reject) => {\n        let dateTime = new Date();\n        let start = moment(dateTime).format(\"YYYY-MM-DD\"); //currnet date \n        let end = moment(start).add(1, 'days').format(\"YYYY-MM-DD\"); // next date\n        let id_list = []\n        email.find({ shedule_date: { \"$gte\": start, \"$eq\": end } }, { \"shedule_date\": 1, \"shedule_time\": 1, \"tag_id\": 1, \"from\": 1, \"send_template\": 1, \"sender_mail\": 1, \"shedule_for\": 1 }).exec(function(err, response) {\n            if (response.length) {\n                sendReminder(response, function(reminder_status) {\n                    email.update({ \"_id\": { \"$in\": id_list } }, { reminder_send: 1 }, { multi: true }).exec(function(err, update_response) {\n                        if (!err) {\n                            resolve(reminder_status)\n                        }\n                    })\n                })\n            } else {\n                resolve(\"No email is sheduled for tomorrow\")\n            }\n        })\n\n        function sendReminder(mail_data, callback) { // function for sending reminder\n            let user_info = mail_data.splice(0, 1)[0];\n            id_list.push(user_info._id)\n            db.Template.findById(parseInt(user_info.send_template)) // finding template that is send to candiadte\n                .then((template_data) => {\n                    replaceData.filter(template_data.body, user_info.from, user_info.tag_id[0], user_info.shedule_date, user_info.shedule_time) // replace user variables\n                        .then((replaced_data) => {\n                            db.Smtp.findOne({ where: { status: 1 } })\n                                .then((smtp) => {\n                                    let subject = constant().reminder + \" \" + moment(user_info.shedule_date).format(\"MMMM Do YYYY\") + \" at \" + user_info.shedule_time // subject for remonder email\n                                    mail.sendScheduledMail(user_info.sender_mail, subject, \"\", smtp, replaced_data) // sending email\n                                        .then((mail_response) => {\n                                            db.Tag.findById(parseInt(user_info.tag_id)).then((job_profile) => {\n                                                let slack_message = constant().slack_reminder + \"\\n\" + \"Candidate name: \" + user_info.from + \"\\n\" + \" Email: \" + user_info.sender_mail + \"\\n\" + \"Job profile: \" + job_profile.title + \"\\n\" + \"Round: \" + user_info.shedule_for + \"\\n\" + \" At: \" + user_info.shedule_time + \"\\n\" + constant().candidate_url + user_info._id;\n                                                slack.slackNotification(slack_message, user_info.sender_mail).then((slack_response) => {\n                                                    if (slack_response == 200) {\n                                                        console.log(\"slack notification sent\")\n                                                    }\n                                                })\n                                            })\n                                            mail_response['user'] = \"Reminder\";\n                                            email_log.emailLog(logs, mail_response).then((mail_log) => {\n                                                if (mail_data.length) {\n                                                    sendReminder(mail_data, callback)\n                                                } else {\n                                                    callback({ message: \"Reminder Sent To Selected Users\" })\n                                                }\n                                            })\n                                        })\n                                })\n                        })\n                })\n        }\n    })\n}\n\n\nlet sendEmailToPendingCandidate = (cron_service, logs, email, emailTrack) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().pending_work }).exec(function(err, cronWorkData) {\n            if (cronWorkData && cronWorkData.get('candidate_list').length) {\n                db.Smtp.findOne({ where: { status: 1 } })\n                    .then((smtp) => {\n                        db.Template.findById(cronWorkData.get('template_id')).then((template) => {\n                            email.find({ _id: cronWorkData.get('candidate_list')[0]._id, \"$or\": [{ is_automatic_email_send: 0 }, { is_automatic_email_send: { \"$exists\": false } }] }, { \"_id\": 1, \"sender_mail\": 1, \"from\": 1, \"is_automatic_email_send\": 1, \"subject\": 1 }).exec(function(err, result) {\n                                if (result) {\n                                    sendTemplateToEmails(cronWorkData.get('candidate_list')[0], template, smtp, function(err, data) {\n                                        if (err) {\n                                            reject(err)\n                                        } else {\n                                            resolve(data)\n                                        }\n                                    })\n                                } else {\n                                    cron_service.update({ _id: cronWorkData.get('_id') }, { $pull: { candidate_list: cronWorkData.get('candidate_list')[0] } }).exec(function(err, updated_cronWork) {\n                                        if (!err) {\n                                            console.log(updated_cronWork)\n                                            resolve(\"Email Sent To candidate\")\n                                        }\n                                    })\n                                }\n                            })\n                        })\n\n                        function sendTemplateToEmails(emails, template, smtp, callback) {\n                            let subject = \"\";\n                            console.log(emails)\n                            if (!smtp) {\n                                callback(\"Not active Smtp\", null);\n                            }\n                            let email_id = emails;\n                            replaceData.filter(template.body, email_id.from, emails.tag_id)\n                                .then((html) => {\n                                    subject = template.subject;\n                                    mail.sendMail(email_id.sender_mail, subject, constant().smtp.text, smtp, html, true)\n                                        .then((response) => {\n                                            response['user'] = cronWorkData.get('user');\n                                            response['tag_id'] = emails.tag_id;\n                                            email_log.emailLog(logs, response)\n                                                .then((log_response) => {\n                                                    email.update({ \"_id\": email_id._id }, { is_automatic_email_send: 1, send_template_count: 1, template_id: [template.id], reply_to_id: response.reply_to })\n                                                        .then((data1) => {\n                                                            cron_service.update({ _id: cronWorkData.get('_id') }, { \"$pull\": { candidate_list: emails } }).exec(function(err, updated_cronWork) {\n                                                                if (!err) {\n                                                                    let tracking_info = {\n                                                                        candidate_email: email_id.sender_mail,\n                                                                        tracking_id: response.tracking_id,\n                                                                        sent_time: new Date(),\n                                                                        tag_id: cronWorkData.get('tag_id')\n                                                                    }\n                                                                    emailTrack.create(tracking_info).then((info) => {\n                                                                        email.update({ sender_mail: email_id.sender_mail }, { email_track: info._id }, { multi: true }).then((res) => {\n                                                                            callback(null, \"email sent to pending candidate\")\n                                                                        })\n                                                                    })\n                                                                }\n                                                            })\n                                                        })\n                                                })\n                                        })\n\n                                })\n\n                        }\n                    })\n            } else {\n                cron_service.findOneAndUpdate({ status: 1, work: constant().pending_work }, { $set: { status: 0 } }).exec(function(err, update_status) {\n                    if (err) {\n                        reject(err)\n                    } else {\n                        resolve(\"Nothing in Pending\")\n                    }\n                })\n            }\n        })\n    })\n}\n\n\nlet sendEmailToNotRepliedCandidate = (cron_service, logs, email, emailTrack) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().not_replied }).then((cronWorkData) => {\n            if (cronWorkData && cronWorkData.get('candidate_list').length) {\n                db.Smtp.findOne({ where: { status: 1 } })\n                    .then((smtp) => {\n                        sendTemplateToEmails(cronWorkData, smtp, function(err, response) {\n                            resolve(\"SUCCESS\")\n                        })\n\n                        function sendTemplateToEmails(cronWorkData, smtp, callback) {\n                            let subject = cronWorkData.get('subject');\n                            let candidate_info = cronWorkData.get(\"candidate_list\")[0];\n                            if (!smtp) {\n                                callback(\"Not active Smtp\", null);\n                            }\n                            replaceData.filter(cronWorkData.get('body'), candidate_info.from, cronWorkData.tag_id)\n                                .then((html) => {\n                                    mail.sendMail(candidate_info.sender_mail, subject, constant().smtp.text, smtp, html).then((mail_response) => {\n                                        email_log.emailLog(logs, mail_response)\n                                            .then((log_response) => {\n                                                email.update({ _id: candidate_info._id }, { $inc: { send_template_count: 1 }, $push: { template_id: parseInt(cronWorkData.get('template_id')) }, is_automatic_email_send: 1 }).then((response) => {\n                                                    cron_service.findOneAndUpdate({ _id: cronWorkData._id }, { \"$pull\": { candidate_list: candidate_info } }).then((updated_cronWork) => {\n                                                        let tracking_info = {\n                                                            candidate_email: candidate_info,\n                                                            tracking_id: mail_response.tracking_id,\n                                                            sent_time: new Date(),\n                                                            tag_id: cronWorkData.get('tag_id'),\n                                                            campaign_name: cronWorkData.get('campaign_name'),\n                                                            subject: cronWorkData.get('subject'),\n                                                            body: cronWorkData.get('body')\n                                                        }\n                                                        emailTrack.create(tracking_info).then((info) => {\n                                                            email.update({ sender_mail: candidate_info }, { email_track: info._id }, { multi: true }).then((res) => {\n                                                                callback(null, updated_cronWork)\n                                                            })\n                                                        })\n                                                    })\n                                                })\n                                            })\n                                    })\n                                })\n                        }\n                    })\n            } else {\n                cron_service.findOneAndUpdate({ status: 1, work: constant().not_replied }, { $set: { status: 0 } }).exec(function(err, update_status) {\n                    if (err) {\n                        reject(err)\n                    } else {\n                        resolve(\"Nothing in Pending\")\n                    }\n                })\n            }\n        })\n    });\n}\n\nlet sendToSelected = (cron_service, logs, email, emailTrack) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().selectedCandidate }).then((cronWorkData) => {\n            if (cronWorkData != null ? cronWorkData.get('candidate_list').length : false) {\n                db.Smtp.findOne({ where: { status: 1 } }).then((smtp) => {\n                    let email_data = cronWorkData.get('candidate_list')[0];\n                    mail.sendMail(email_data, cronWorkData.get('subject'), constant().smtp.text, smtp, cronWorkData.get('body')).then((mail_response) => {\n                        email_log.emailLog(logs, mail_response)\n                            .then((log_response) => {\n                                cron_service.findOneAndUpdate({ _id: cronWorkData._id }, { \"$pull\": { candidate_list: email_data } }).then((updated_cronWork) => {\n                                    let tracking_info = {\n                                        candidate_email: email_data,\n                                        tracking_id: mail_response.tracking_id,\n                                        sent_time: new Date(),\n                                        campaign_name: cronWorkData.get('campaign_name'),\n                                        subject: cronWorkData.get('subject'),\n                                        body: cronWorkData.get('body')\n                                    }\n                                    emailTrack.create(tracking_info).then((info) => {\n                                        email.update({ sender_mail: email_data }, { email_track: info._id, unread: false }, { multi: true }).then((res) => {\n                                            resolve(\"SUCCESS\")\n                                        })\n                                    })\n                                })\n                            })\n                    })\n                })\n            } else {\n                if (!cronWorkData) {\n                    resolve(\"Nothing In Pending\")\n                } else {\n                    cron_service.findOneAndUpdate({ _id: cronWorkData.get('_id') }, { status: 0 }).then((updated_cronWork) => {\n                        resolve(\"Nothing In Pending\")\n                    })\n                }\n            }\n        })\n    });\n}\n\nlet sendToAll = (cron_service, logs, email, emailTrack) => {\n    return new Promise((resolve, reject) => {\n        cron_service.findOne({ status: 1, work: constant().sendToAll }).then((cronWorkData) => {\n            if (cronWorkData != null ? cronWorkData.get('candidate_list').length : false) {\n                db.Smtp.findOne({ where: { status: 1 } }).then((smtp) => {\n                    let email_data = cronWorkData.get('candidate_list').splice(0, 1)[0];\n                    mail.sendMail(email_data, cronWorkData.get('subject'), constant().smtp.text, smtp, cronWorkData.get('body'), false, cronWorkData.get('_id')).then((mail_response) => {\n                        email_log.emailLog(logs, mail_response)\n                            .then((log_response) => {\n                                let tracking_info = {\n                                    candidate_email: email_data,\n                                    tracking_id: mail_response.tracking_id,\n                                    sent_time: new Date(),\n                                    tag_id: cronWorkData.get('tag_id'),\n                                    campaign_name: cronWorkData.get('campaign_name'),\n                                    subject: cronWorkData.get('subject'),\n                                    body: cronWorkData.get('body')\n                                }\n                                emailTrack.create(tracking_info).then((info) => {\n                                    cron_service.findOneAndUpdate({ _id: cronWorkData._id }, { candidate_list: cronWorkData.get('candidate_list') }).then((updated_cronWork) => {\n                                        email.update({ sender_mail: email_data }, { email_track: info._id }, { multi: true }).then((res) => {\n                                            resolve(\"SUCCESS\")\n                                        })\n                                    })\n                                })\n                            })\n                    })\n                })\n            } else {\n                if (!cronWorkData) {\n                    resolve(\"Nothing In Pending\")\n                } else {\n                    cron_service.findOneAndUpdate({ _id: cronWorkData.get('_id') }, { status: 0 }).then((updated_cronWork) => {\n                        resolve(\"Nothing In Pending\")\n                    })\n                }\n            }\n        })\n    });\n}\n\nlet resendEmail = (cron_service, logs, email, emailTrack) => {\n    return new Promise((resolve, reject) => {\n        cron_service.find({ status: 1, work: constant().resendEmail }).then((candidate_info) => {\n            if (candidate_info.length) {\n                let candidate = candidate_info.splice(0, 1)[0]\n                db.Smtp.findOne({ where: { status: 1 } }).then((smtp_data) => {\n                    if (smtp_data) {\n                        let email_id = candidate.get('candidate_list').splice(0, 1)[0]\n                        EmailToNotViewed.sendEmailToNotViewed(smtp_data, email_id, candidate).then((mail_response) => {\n                            email_log.emailLog(logs, mail_response).then((log_response) => {\n                                if (candidate.get('candidate_list').length) {\n                                    cron_service.update({ _id: candidate._id }, { candidate_list: candidate.get('candidate_list') }).then((response) => {\n                                        let tracking_info = {\n                                            candidate_email: email_id.email,\n                                            tracking_id: mail_response.tracking_id,\n                                            sent_time: new Date(),\n                                            tag_id: candidate.get('tag_id'),\n                                            campaign_name: candidate.get('campaign_name'),\n                                            subject: candidate.get('subject'),\n                                            body: candidate.get('body')\n                                        }\n                                        emailTrack.create(tracking_info).then((info) => {\n                                            email.update({ sender_mail: email_id }, { email_track: info._id }, { multi: true }).then((res) => {\n                                                resolve(\"SUCCESS\")\n                                            })\n                                        })\n                                    })\n                                } else {\n                                    cron_service.update({ _id: candidate._id }, { candidate_list: candidate.get('candidate_list'), status: 0 }).then((response) => {\n                                        let tracking_info = {\n                                            candidate_email: email_id.email,\n                                            tracking_id: mail_response.tracking_id,\n                                            sent_time: new Date(),\n                                            tag_id: candidate.get('tag_id'),\n                                            campaign_name: candidate.get('campaign_name'),\n                                            subject: candidate.get('subject'),\n                                            body: candidate.get('body')\n                                        }\n                                        emailTrack.create(tracking_info).then((info) => {\n                                            email.update({ sender_mail: email_id }, { email_track: info._id }, { multi: true }).then((res) => {\n                                                resolve(\"SUCCESS\")\n                                            })\n                                        })\n                                    })\n                                }\n                            })\n                        })\n                    } else {\n                        reject(\"No Active SMTP...\")\n                    }\n                })\n            } else {\n                resolve()\n            }\n        })\n    })\n}\nexport default {\n    reminderMail,\n    sendEmailToPendingCandidate,\n    sendEmailToNotRepliedCandidate,\n    sendToSelected,\n    sendToAll,\n    resendEmail\n}"]}