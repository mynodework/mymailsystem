{"version":3,"sources":["../../src/service/spamWork.js"],"names":["removeSpam","req","db","Promise","resolve","reject","findSpamContactList","then","spamListContacts","findSpamEmails","spamEmails","spamBox","insertMany","emails","spamDataMoved","email","find","sender_mail","$in","remove","response","message","email_lists","SpamList","findAll","forEach","val","key","push","length","spam_ids","_id","ids"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,EAAN,EAAa;AAC5B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,8BAAsBC,IAAtB,CAA2B,UAACC,gBAAD,EAAsB;AAC7CC,2BAAeD,gBAAf,EAAiCD,IAAjC,CAAsC,UAACG,UAAD,EAAgB;AAClDT,oBAAIU,OAAJ,CAAYC,UAAZ,CAAuBF,WAAWG,MAAlC,EAA0CN,IAA1C,CAA+C,UAACO,aAAD,EAAmB;AAC9Db,wBAAIc,KAAJ,CAAUC,IAAV,CAAe,EAAEC,aAAa,EAAEC,KAAKV,gBAAP,EAAf,EAAf,EAA0DW,MAA1D,GAAmEZ,IAAnE,CAAwE,UAACa,QAAD,EAAc;AAClFhB,gCAAQ,EAAEiB,SAAS,gCAAX,EAAR;AACH,qBAFD;AAGH,iBAJD;AAKH,aAND;AAQH,SATD;;AAWA,iBAASf,mBAAT,GAA+B;AAC3B,mBAAO,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIiB,cAAc,EAAlB;AACApB,mBAAGqB,QAAH,CAAYC,OAAZ,GAAsBjB,IAAtB,CAA2B,UAACC,gBAAD,EAAsB;AAC7C,qCAAEiB,OAAF,CAAUjB,gBAAV,EAA4B,UAACkB,GAAD,EAAMC,GAAN,EAAc;AACtCL,oCAAYM,IAAZ,CAAiBF,IAAI,OAAJ,CAAjB;AACA,4BAAIC,OAAOnB,iBAAiBqB,MAAjB,GAA0B,CAArC,EAAwC;AACpCzB,oCAAQkB,WAAR;AACH;AACJ,qBALD;AAMH,iBAPD;AAQH,aAVM,CAAP;AAWH;;AAED,iBAASb,cAAT,CAAwBD,gBAAxB,EAA0C;AACtC,mBAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIyB,WAAW,EAAf;AACA7B,oBAAIc,KAAJ,CAAUC,IAAV,CAAe,EAAEC,aAAa,EAAEC,KAAKV,gBAAP,EAAf,EAAf,EAA2DD,IAA3D,CAAgE,UAACG,UAAD,EAAgB;AAC5E,wBAAIA,WAAWmB,MAAf,EAAuB;AACnB,yCAAEJ,OAAF,CAAUf,UAAV,EAAsB,UAACgB,GAAD,EAAMC,GAAN,EAAc;AAChCG,qCAASF,IAAT,CAAcF,IAAIK,GAAlB;AACA,gCAAIJ,OAAOjB,WAAWmB,MAAX,GAAoB,CAA/B,EAAkC;AAC9BzB,wCAAQ,EAAES,QAAQH,UAAV,EAAsBsB,KAAKF,QAA3B,EAAR;AACH;AACJ,yBALD;AAMH,qBAPD,MAOO;AACH1B,gCAAQ,EAAES,QAAQ,EAAV,EAAcmB,KAAK,EAAnB,EAAR;AACH;AAEJ,iBAZD;AAaH,aAfM,CAAP;AAgBH;AACJ,KA5CM,CAAP;AA6CH,CA9CD;;kBAgDe;AACXhC;AADW,C","file":"spamWork.js","sourcesContent":["import constant from \"../models/constant\";\nimport _ from \"lodash\";\n\nconst removeSpam = (req, db) => {\n    return new Promise((resolve, reject) => {\n        findSpamContactList().then((spamListContacts) => {\n            findSpamEmails(spamListContacts).then((spamEmails) => {\n                req.spamBox.insertMany(spamEmails.emails).then((spamDataMoved) => {\n                    req.email.find({ sender_mail: { $in: spamListContacts }}).remove().then((response) => {\n                        resolve({ message: \"Emails Are moved into SpamList\" })\n                    })\n                })\n            })\n\n        })\n\n        function findSpamContactList() {\n            return new Promise((resolve, reject) => {\n                let email_lists = []\n                db.SpamList.findAll().then((spamListContacts) => {\n                    _.forEach(spamListContacts, (val, key) => {\n                        email_lists.push(val['email'])\n                        if (key == spamListContacts.length - 1) {\n                            resolve(email_lists)\n                        }\n                    })\n                })\n            });\n        }\n\n        function findSpamEmails(spamListContacts) {\n            return new Promise((resolve, reject) => {\n                let spam_ids = []\n                req.email.find({ sender_mail: { $in: spamListContacts } }).then((spamEmails) => {\n                    if (spamEmails.length) {\n                        _.forEach(spamEmails, (val, key) => {\n                            spam_ids.push(val._id)\n                            if (key == spamEmails.length - 1) {\n                                resolve({ emails: spamEmails, ids: spam_ids })\n                            }\n                        })\n                    } else {\n                        resolve({ emails: [], ids: [] })\n                    }\n\n                })\n            });\n        }\n    })\n}\n\nexport default {\n    removeSpam\n}"]}