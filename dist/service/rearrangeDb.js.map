{"version":3,"sources":["../../src/service/rearrangeDb.js"],"names":["reArrange","email","history","Promise","resolve","reject","tag_id","notes","template_id","default_tag","default_tags","priority_tag","find","distinct","then","sender_mail","Tag","findAll","where","type","parent_id","$eq","default_tag_data","findAndUpdate","response","console","log","candidate_list","callback","length","candidateEmail","splice","_id","date","sort","candidateOldestEmail","moveEmailToHistory","movedData","candidate","push","$ne","history_mail","findTagAndNote","tagInfo","undefined","id","insertMany","historyCreated","update","updated_email","remove","emails","$or","candidate_status","forEach","val","key","dataValues","priority","default_id","maxBy","flattenDeep"],"mappings":"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","file":"rearrangeDb.js","sourcesContent":["import db from \"../db.js\";\nimport _ from \"lodash\";\n\nlet reArrange = (email, history) => {\n    return new Promise((resolve, reject) => {\n        let tag_id = [];\n        let notes = [];\n        let template_id = [];\n        let default_tag = 0;\n        let default_tags;\n        let priority_tag = [];\n        email.find().distinct('sender_mail').then((sender_mail) => {\n            db.Tag.findAll({ where: { type: \"Default\", parent_id: { $eq: 0 } } }).then((default_tag_data) => {\n                default_tags = default_tag_data\n                findAndUpdate(sender_mail, function(response) {\n                    console.log(\"all db is synced= \", response)\n                })\n            })\n        })\n\n        function findAndUpdate(candidate_list, callback) {\n            console.log(\"left unique candidate => \", candidate_list.length)\n            let candidateEmail = candidate_list.splice(0, 1)[0]\n            email.find({ sender_mail: candidateEmail }, { _id: 1, date: 1, sender_mail: 1, notes: 1, tag_id: 1, default_tag: 1, template_id: 1 }).sort({ \"date\": 1 }).then((candidateOldestEmail) => {\n                if (candidateOldestEmail.length > 1) {\n                    moveEmailToHistory(candidateOldestEmail[0], function(movedData) {\n                        if (candidate_list.length) {\n                            findAndUpdate(candidate_list, callback)\n                        } else {\n                            callback(true)\n                        }\n                    })\n                } else {\n                    if (candidate_list.length) {\n                        findAndUpdate(candidate_list, callback)\n                    } else {\n                        callback(true)\n                    }\n                }\n            })\n\n        }\n\n        function moveEmailToHistory(candidate, callback) {\n            tag_id.push(candidate.tag_id ? candidate.tag_id : [])\n            notes.push(candidate.notes ? candidate.notes : [])\n            template_id.push(candidate.template_id ? candidate.template_id : [])\n            default_tag = (candidate.default_tag != \"\") ? candidate.default_tag : 0;\n            email.find({ sender_mail: candidate.sender_mail, _id: { $ne: candidate._id } }, { tag_id: 1, default_tag: 1, notes: 1 }).then((response) => {\n                let history_mail = response;\n                findTagAndNote(response, function(tagInfo) {\n                    if (tagInfo.default_tag == undefined) {\n                        tagInfo['default_tag'] = \"\"\n                    } else {\n                        tagInfo['default_tag'] = tagInfo.default_tag.id\n                    }\n                    priority_tag = [];\n                    tag_id = [];\n                    notes = [];\n                    template_id = [];\n                    email.find({ sender_mail: candidate.sender_mail, _id: { $ne: candidate._id } }).then((response) => {\n                        history.insertMany(response).then((historyCreated) => {\n                            if (historyCreated) {\n                                email.update({ _id: candidate._id }, { tag_id: tagInfo.tag_id, default_tag: tagInfo.default_tag, notes: tagInfo.notes, template_id: tagInfo.template_id }).then((updated_email) => {\n                                    email.find({ sender_mail: candidate.sender_mail, _id: { $ne: candidate._id } }).remove().then((response) => {\n                                        callback(true)\n                                    })\n                                })\n                            }\n                        })\n                    })\n                })\n\n            })\n        }\n\n        function findTagAndNote(emails, callback) {\n            db.Tag.findAll({ where: { type: \"Default\", $or: [{ parent_id: { $eq: 0 } }, { parent_id: null }] } }).then((default_tag_data) => {\n                let candidate_status = emails.splice(0, 1)[0];\n                console.log(candidate_status)\n                if (candidate_status.default_tag == \"\" || candidate_status.default_tag == undefined) {\n                    candidate_status.default_tag = default_tag;\n                }\n                if (candidate_status.tag_id && candidate_status.tag_id.length) {\n                    tag_id.push(candidate_status.tag_id);\n                }\n                if (candidate_status.notes && candidate_status.notes.length) {\n                    notes.push(candidate_status.notes);\n                }\n                if (candidate_status.template_id && candidate_status.template_id.length) {\n                    notes.push(candidate_status.template_id);\n                }\n                _.forEach(default_tag_data, (val, key) => {\n                    if (val.dataValues.id == candidate_status.default_tag) {\n                        priority_tag.push({ id: val.dataValues.id, priority: val.dataValues.default_id })\n                    }\n\n                    if (key == default_tag_data.length - 1) {\n                        if (emails.length) {\n                            findTagAndNote(emails, callback)\n                        } else {\n                            callback({ default_tag: _.maxBy(priority_tag, 'priority'), tag_id: _.flattenDeep(tag_id), notes: _.flattenDeep(notes), template_id: _.flattenDeep(template_id) })\n                        }\n                    }\n                })\n            })\n        }\n    })\n}\n\nexport default {\n    reArrange\n}"]}